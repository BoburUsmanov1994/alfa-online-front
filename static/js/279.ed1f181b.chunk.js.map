{"version":3,"file":"static/js/279.ed1f181b.chunk.js","mappings":"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","sources":["components/panel/index.jsx","components/search/index.jsx","components/section/index.jsx","components/ui/title/index.jsx","containers/grid-view/components/grid-table.jsx","containers/grid-view/components/grid-table-body.jsx","modules/auth/pages/ErrorPage.jsx","containers/grid-view/components/grid-modal.jsx","modules/auth/pages/EmptyPage.jsx","components/pagination/index.jsx","containers/grid-view/grid-view.jsx"],"sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"react-grid-system\";\r\n\r\nconst Styled = styled.div`\r\n  padding: 12px 15px;\r\n  background-color: #F7F7F7;\r\n  width: 100%;\r\n  display: block;\r\n`;\r\n\r\nconst Panel = ({\r\n                   children,\r\n                   ...rest\r\n               }) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <Container fluid>\r\n                {children}\r\n            </Container>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Panel;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst Styled = styled.form`\r\n  display: flex;\r\n\r\n  .search-form-input {\r\n    padding: 15px 25px;\r\n    border: 1px solid #CDCDCD;\r\n    border-radius: 5px 0px 0px 5px;\r\n    display: block;\r\n    width: 100%;\r\n    outline: none;\r\n    transition: 0.2s ease;\r\n    font-size: 16px;\r\n    font-family: 'Gilroy-Regular', sans-serif;\r\n\r\n    &:focus {\r\n      border-color: #13D6D1;\r\n    }\r\n  }\r\n\r\n  .search-form-btn {\r\n    padding: 15px 20px;\r\n    min-width: 175px;\r\n    text-align: center;\r\n    border: none;\r\n    background: #13D6D1;\r\n    border-radius: 0px 5px 5px 0px;\r\n    color: #fff;\r\n    font-size: 16px;\r\n    font-family: 'Gilroy-Medium', sans-serif;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst Search = ({\r\n                    ...rest\r\n                }) => {\r\n    const {register, handleSubmit} = useForm();\r\n    const {t} = useTranslation()\r\n    const onSubmit = (data) => {\r\n        console.log('search', data)\r\n    }\r\n    return (\r\n        <Styled onSubmit={handleSubmit(onSubmit)} {...rest}>\r\n            <input placeholder={t('Поиск')}  {...register(\"search\")} type=\"text\" className={'search-form-input'}/>\r\n            <button className={'search-form-btn'} type={'submit'}>{t(\"Найти\")}</button>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"react-grid-system\";\r\n\r\nconst Styled = styled.section`\r\n  padding: 25px 15px;\r\n  background-color: #fff;\r\n  \r\n`;\r\nconst Section = ({\r\n                     children,\r\n                     ...rest\r\n                 }) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <Container fluid>\r\n                {children}\r\n            </Container>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Section;","import React, {useEffect, useState,useRef} from 'react';\r\nimport styled,{css} from \"styled-components\";\r\n\r\nconst Styled = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  h2{\r\n    padding-right: 25px;\r\n    font-size: 24px;\r\n    color: #000;\r\n    font-family: 'Gilroy-Bold', sans-serif;\r\n    margin-bottom: 0;\r\n  }\r\n  .line{\r\n    height: 1px;\r\n    background-color: #E5E5E5;\r\n    margin-top: 5px;\r\n    ${({w}) => w && `width: calc(100% - ${w}px - 10px);`}\r\n  }\r\n  \r\n  ${({sm}) => sm && css`\r\n    h2 {\r\n      font-size: 18px;\r\n    }\r\n  `}\r\n`;\r\nconst Title = ({\r\n                   children,\r\n                   ...rest\r\n               }) => {\r\n    const [width,setWidth] = useState(0);\r\n    useEffect(()=>{\r\n        setWidth(ref.current.clientWidth)\r\n    },[])\r\n    const ref = useRef(null)\r\n    return (\r\n        <Styled {...rest} w={width}>\r\n            <h2 ref={ref}>{children}</h2>\r\n            <div className=\"line\"></div>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {get} from \"lodash\"\r\nimport {ContentLoader} from \"../../../components/loader\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\nconst Styled = styled.table`\r\n  width: 100%;\r\n  text-align: left;\r\n  margin-top: 15px;\r\n\r\n  tr {\r\n    vertical-align: middle;\r\n  }\r\n\r\n  .table-head {\r\n    th {\r\n      padding: 12px;\r\n      color: #010101;\r\n      font-family: 'Gilroy-Medium', sans-serif;\r\n      font-size: 16px;\r\n\r\n      &:first-child {\r\n        text-align: left;\r\n        padding-left: 20px;\r\n      }\r\n\r\n      text-align: center;\r\n\r\n      &:last-child {\r\n        text-align: right;\r\n        padding-right: 20px;\r\n        min-width: 125px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .table-body {\r\n    tr:nth-child(2n+1) {\r\n      background-color: #F4F4F4;\r\n    }\r\n\r\n    td {\r\n      padding: 12px;\r\n      font-family: 'Gilroy-Regular', sans-serif;\r\n      color: #000;\r\n\r\n      &:first-child {\r\n        text-align: left;\r\n        padding-left: 20px;\r\n      }\r\n\r\n      text-align: center;\r\n\r\n      &:last-child {\r\n        text-align: right;\r\n        padding-right: 20px;\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GridTable = ({\r\n                       tableHeaderData = [],\r\n                       tableBodyData = [],\r\n                       TableBody,\r\n                       remove = () => {\r\n                       },\r\n                       openEditModal = () => {\r\n                       },\r\n                       isFetching = false,\r\n                       page,\r\n                       viewUrl = null,\r\n                       updateUrl = null,\r\n                       dataKey = null,\r\n                       ...rest\r\n                   }) => {\r\n    const {t} = useTranslation()\r\n    return (\r\n        <Styled {...rest}>\r\n            {isFetching && <ContentLoader/>}\r\n            <thead className={'table-head'}>\r\n            <tr>\r\n                <th>№</th>\r\n                {\r\n                    tableHeaderData && tableHeaderData.map((th, i) => <th key={get(th, 'id', i)}>\r\n                        {\r\n                            t(get(th, 'title', '-'))\r\n                        }\r\n                    </th>)\r\n\r\n                }\r\n                <th>{t(\"Actions\")}</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody className={'table-body'}>\r\n            <TableBody dataKey={dataKey} viewUrl={viewUrl} updateUrl={updateUrl} page={page} remove={remove} openEditModal={openEditModal} tableHeaderData={tableHeaderData}\r\n                       tableBodyData={tableBodyData}/>\r\n            </tbody>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default GridTable;","import React from 'react';\r\nimport {get, includes} from \"lodash\";\r\nimport {Trash2, Edit, Eye} from \"react-feather\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport NumberFormat from 'react-number-format';\r\nimport dayjs from \"dayjs\";\r\n\r\nconst GridTableBody = ({\r\n                           tableHeaderData = [],\r\n                           tableBodyData = [],\r\n                           remove = () => {\r\n                           },\r\n                           openEditModal = () => {\r\n                           },\r\n                           page,\r\n                           viewUrl = null,\r\n                           updateUrl = null,\r\n                           dataKey = null,\r\n                           pageSize=20\r\n                       }) => {\r\n    const navigate = useNavigate();\r\n    return (\r\n        <>\r\n            {\r\n                tableBodyData && tableBodyData.map((tr, i) => <tr key={get(tr, '_id', i)}>\r\n                    <td>{(page - 1) * 20 + (i + 1)}</td>\r\n                    {\r\n                        tableHeaderData && tableHeaderData.map((td, j) => <td className={get(td, \"classnames\", \"\")}>\r\n                            {get(td, 'render')\r\n                                ?\r\n                                get(td, 'render')({\r\n                                    value:get(tr, get(td, 'key')),\r\n                                    row:tr,\r\n                                    index:i+(page-1)*pageSize+1\r\n                                })\r\n                                :\r\n                                get(tr, get(td, 'key'))}\r\n                        </td>)\r\n                    }\r\n                    <td>{viewUrl && <Eye\r\n                        onClick={() => navigate(`${viewUrl}/${dataKey ? get(tr, dataKey, null) : get(tr, '_id', null)}`)}\r\n                        className={'cursor-pointer mr-10'} size={20} color={'#78716c'}/>}\r\n                        {!includes(['payed','sent'],get(tr,'status')) && <>\r\n                        <Edit\r\n                        onClick={() => {\r\n                            if (updateUrl) {\r\n                                navigate(`${updateUrl}/${dataKey ? get(tr, dataKey, null) : get(tr, '_id', null)}`)\r\n                                return\r\n                            }\r\n                            openEditModal(get(tr, '_id', null))\r\n                        }} className={'cursor-pointer mr-10'} size={20}\r\n                        color={'#13D6D1'}/>\r\n                        <Trash2 onClick={() => remove(dataKey ? get(tr, dataKey, null) : get(tr, '_id', null))}\r\n                                className={'cursor-pointer '} size={20} color={'#dc2626'}/>\r\n                        </>}\r\n                    </td>\r\n                </tr>)\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GridTableBody;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport forbiddenImg from \"../../../assets/images/empty.png\"\r\nconst Styled = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst ErrorPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <img className={'img-fluid'} src={forbiddenImg}  alt=\"Error\"/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React,{useState,memo} from 'react';\r\nimport styled from 'styled-components';\r\nimport Rodal from 'rodal';\r\nimport Form from \"../../form/form\";\r\nimport Button from \"../../../components/ui/button\";\r\nimport {useGetOneQuery} from \"../../../hooks/api\";\r\nimport {get, isEqual} from \"lodash\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst Styled = styled.div`\r\n  .rodal-dialog {\r\n    padding: 40px 30px !important;\r\n    height: auto !important;\r\n    overflow-y: auto;\r\n    left: 50% !important;\r\n    top: 50% !important;\r\n    transform: translate(-50%,-50%);\r\n    right: unset !important;\r\n    bottom: unset !important;\r\n    max-height: 60vh !important;\r\n  }\r\n`;\r\nconst GridModal = ({\r\n                       hide = () => {\r\n                       },\r\n                       visible = false,\r\n                       create = () => {\r\n                       },\r\n                       update = () => {\r\n                       },\r\n                       rowId = null,\r\n                       url = null,\r\n                       keyId = null,\r\n                       responseDataKey,\r\n                       ModalBody = null,\r\n                       ...rest\r\n                   }) => {\r\n    const {t} = useTranslation()\r\n\r\n    const {data, isLoading} = useGetOneQuery({id: rowId, key: keyId, url, enabled: !!(rowId),showErrorMsg:false})\r\n    return (\r\n        <Styled {...rest}>\r\n            <Rodal visible={visible} onClose={hide}>\r\n                <Form   formRequest={rowId ? update : create} footer={<Button type={'submit'} className={'w-100'} >\r\n                    {\r\n                        rowId ? t('Edit') : t('Send')\r\n                    }\r\n                </Button>}>\r\n                    <ModalBody rowId={rowId} data={get(data,`data.${responseDataKey}`,{})}  />\r\n                </Form>\r\n            </Rodal>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default memo(GridModal);","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport emptyImg from \"../../../assets/images/empty.png\"\r\nconst Styled = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nconst ErrorPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <img className={'img-fluid'} src={emptyImg}  alt=\"Empty\"/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {ceil, isEqual, range, get} from \"lodash\"\r\nimport classNames from \"classnames\";\r\nimport {ChevronLeft, ChevronRight} from \"react-feather\";\r\nimport {useNavigate, useLocation} from \"react-router-dom\";\r\n\r\nconst Styled = styled.ul`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n  flex-wrap: wrap;\r\n\r\n  li {\r\n    width: 40px;\r\n    height: 40px;\r\n    font-size: 16px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 1px solid #CCCCCC;\r\n    color: #A4A4A4;\r\n    font-family: 'Gilroy-Medium', sans-serif;\r\n    -webkit-border-radius: 50%;\r\n    -moz-border-radius: 50%;\r\n    border-radius: 50%;\r\n    margin-right: 10px;\r\n    cursor: pointer;\r\n    margin-bottom: 5px;\r\n\r\n    &:last-child {\r\n      margin-right: 0;\r\n    }\r\n\r\n    &.active {\r\n      background-color: #13D6D1;\r\n      border-color: #13D6D1;\r\n      color: #fff;\r\n    }\r\n  }\r\n`;\r\nconst Pagination = ({\r\n                        totalItems = 0,\r\n                        limit = 20,\r\n                        page = 1,\r\n                        setPage = () => {\r\n                        },\r\n                        ...rest\r\n                    }) => {\r\n    const count = ceil(totalItems / limit)\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    return (\r\n        <Styled {...rest}>\r\n            {!!(page > 1) && <li onClick={() => {\r\n                navigate({\r\n                    pathname: get(location, 'pathname', '/'),\r\n                    search: `?page=${page - 1}`\r\n                });\r\n                setPage(page - 1);\r\n            }} className={'prev'}>\r\n                <ChevronLeft/>\r\n            </li>}\r\n            {\r\n                count > 1 && range(1, count + 1).map(item => <li className={classNames({'active': page == item})}\r\n                                                                 onClick={() => {\r\n                                                                     navigate({\r\n                                                                         pathname: get(location, 'pathname', '/'),\r\n                                                                         search: `?page=${item}`\r\n                                                                     });\r\n                                                                     setPage(item);\r\n\r\n                                                                 }\r\n                                                                 } key={item}>\r\n                    {item}\r\n                </li>)\r\n            }\r\n            {!!(count > 1 && page < count) && <li onClick={() => {\r\n                navigate({\r\n                    pathname: get(location, 'pathname', '/'),\r\n                    search: `?page=${page + 1}`\r\n                });\r\n                setPage(page + 1);\r\n            }} className={'next'}>\r\n                <ChevronRight/>\r\n            </li>}\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Pagination;","import React, {useEffect, useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport GridTable from \"./components/grid-table\";\r\nimport GridTableBody from \"./components/grid-table-body\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport Title from \"../../components/ui/title\";\r\nimport {get, includes, isEmpty, isEqual} from \"lodash\"\r\nimport {\r\n    useDeleteQuery,\r\n    usePaginateQuery,\r\n    usePostQuery,\r\n    usePutQuery\r\n} from \"../../hooks/api\";\r\nimport ErrorPage from \"../../modules/auth/pages/ErrorPage\";\r\nimport {OverlayLoader} from \"../../components/loader\";\r\nimport GridModal from \"./components/grid-modal\";\r\nimport Button from \"../../components/ui/button\";\r\nimport Panel from \"../../components/panel\"\r\nimport Search from \"../../components/search\";\r\nimport Section from \"../../components/section\";\r\nimport Swal from \"sweetalert2\";\r\nimport EmptyPage from \"../../modules/auth/pages/EmptyPage\";\r\nimport Pagination from \"../../components/pagination\";\r\nimport {useNavigate,useSearchParams} from 'react-router-dom'\r\nimport Flex from \"../../components/flex\";\r\nimport Dropdown from \"../../components/dropdown\";\r\nimport {Check, ChevronUp, Menu} from \"react-feather\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\nconst Styled = styled.div`\r\n  .w-100 > div:first-child {\r\n    width: 100%;\r\n  }\r\n\r\n  .dropDown__button {\r\n    margin-top: 10px;\r\n    margin-left: 15px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .dropDown__body {\r\n    width: 200px !important;\r\n  }\r\n\r\n  .column__filter {\r\n    padding: 12px;\r\n\r\n    li {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      padding: 5px;\r\n      margin-bottom: 5px;\r\n      cursor: pointer;\r\n\r\n      &:first-child {\r\n        border-bottom: 1px solid #DCDCDC;\r\n        cursor: default;\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GridView = ({\r\n                      TableBody = GridTableBody,\r\n                      ModalBody = () => <h2>Modal body</h2>,\r\n                      tableHeaderData = [],\r\n                      title = '',\r\n                      keyId,\r\n                      url,\r\n                      createUrl = null,\r\n                      updateUrl = null,\r\n                      viewUrl = null,\r\n                      responseDataKey = 'data',\r\n                      isHideColumn = false,\r\n                      dataKey = null,\r\n                      deleteUrl = null,\r\n                      deleteParam = null,\r\n                  }) => {\r\n    const navigate = useNavigate()\r\n    const [searchParams, setSearchBarParams] = useSearchParams();\r\n    const {t} = useTranslation()\r\n    const [openModal, setOpenModal] = useState(false)\r\n    const [rowId, setRowId] = useState(null)\r\n    const [page, setPage] = useState(searchParams.get('page') || 1)\r\n    const [columns, setColumns] = useState([])\r\n    const {data, isError, isLoading, isFetching} = usePaginateQuery({\r\n        key: keyId, url,\r\n        params: {\r\n          params:{\r\n              skip:page-1,\r\n              limit:15\r\n          }\r\n        }\r\n    })\r\n    const {mutate: createRequest, isLoading: postLoading} = usePostQuery({listKeyId: keyId})\r\n    const {mutate: updateRequest, isLoading: putLoading} = usePutQuery({listKeyId: keyId})\r\n    const {mutate: deleteRequest, isLoading: deleteLoading} = useDeleteQuery({listKeyId: keyId})\r\n\r\n    useEffect(() => {\r\n        if (!isEmpty(tableHeaderData)) {\r\n            setColumns(tableHeaderData)\r\n        }\r\n    }, [tableHeaderData])\r\n\r\n    const create = ({data}) => {\r\n        createRequest({url, attributes: data}, {\r\n            onSuccess: () => {\r\n                setOpenModal(false)\r\n            },\r\n            onError: () => {\r\n                setOpenModal(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    const update = ({data}) => {\r\n        if (rowId) {\r\n            updateRequest({url: `${url}/${rowId}`, attributes: data}, {\r\n                onSuccess: () => {\r\n                    setOpenModal(false)\r\n                },\r\n                onError: () => {\r\n                    setOpenModal(false)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const openEditModal = (id) => {\r\n        setOpenModal(true);\r\n        setRowId(id);\r\n    }\r\n\r\n    const remove = (id) => {\r\n        Swal.fire({\r\n            position: 'center',\r\n            icon: 'error',\r\n            backdrop: 'rgba(0,0,0,0.9)',\r\n            background: 'none',\r\n            title: t('Are you sure?'),\r\n            showConfirmButton: true,\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#d33',\r\n            cancelButtonColor: '#13D6D1',\r\n            confirmButtonText: t('Delete'),\r\n            cancelButtonText: t('Cancel'),\r\n            customClass: {\r\n                title: 'title-color',\r\n            },\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                if (dataKey) {\r\n                    deleteRequest({url: `${deleteUrl}?${deleteParam ?? 'osgor_formId'}=${id}` ?? url})\r\n                } else {\r\n                    deleteRequest({url: `${url}/${id}`})\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    const hideColumn = (key, has) => {\r\n        if (has) {\r\n            setColumns(columns => columns.filter(col => !isEqual(get(col, 'key'), key)))\r\n        } else {\r\n            setColumns(columns => [...columns, tableHeaderData.find(col => isEqual(get(col, 'key'), key))])\r\n        }\r\n    }\r\n\r\n    if (isLoading || putLoading || postLoading || deleteLoading) {\r\n        return <OverlayLoader/>\r\n    }\r\n\r\n    if (isError) {\r\n        return <ErrorPage/>\r\n    }\r\n    return (\r\n        <Styled>\r\n            <Panel>\r\n                <Row>\r\n                    <Col xs={10}>\r\n                        <Search/>\r\n                    </Col>\r\n                    <Col xs={2} className={'text-right'}>\r\n                        <Button lg onClick={() => {\r\n                            if (createUrl) {\r\n                                navigate(createUrl)\r\n                                return\r\n                            }\r\n                            setOpenModal(true);\r\n                            setRowId(null)\r\n                        }}>\r\n                            {t(\"Добавить\")}\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Panel>\r\n            <Section>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Flex className={'w-100'}>\r\n                            <Title>{title}</Title>\r\n                            {isHideColumn && <Dropdown button={<Menu/>}>\r\n                                <ul className=\"column__filter\">\r\n                                    <li><span>{t(\"Выбрать\")}</span><ChevronUp/></li>\r\n                                    {\r\n                                        tableHeaderData && tableHeaderData.map(column => <li\r\n                                            onClick={() => hideColumn(get(column, 'key'), includes(columns.map(({key}) => key), get(column, 'key')))}\r\n                                            key={get(column, 'id')}>\r\n                                            <span>{t(get(column, 'title'))}</span>\r\n                                            {includes(columns.map(({key}) => key), get(column, 'key')) &&\r\n                                                <Check size={18}/>}\r\n                                        </li>)\r\n                                    }\r\n\r\n                                </ul>\r\n                            </Dropdown>}\r\n                        </Flex>\r\n                    </Col>\r\n                    <Col xs={12}>\r\n                        <GridModal\r\n                            responseDataKey={responseDataKey}\r\n                            keyId={keyId}\r\n                            rowId={rowId}\r\n                            url={url}\r\n                            create={create}\r\n                            update={update}\r\n                            visible={openModal}\r\n                            hide={() => setOpenModal(false)}\r\n                            ModalBody={ModalBody}\r\n                        />\r\n                    </Col>\r\n\r\n                </Row>\r\n                {isEmpty(get(data, `data[${responseDataKey}]`, [])) ? <EmptyPage/> : <>\r\n                    <div className={'horizontal-scroll'}><GridTable\r\n                        viewUrl={viewUrl}\r\n                        updateUrl={updateUrl}\r\n                        page={page}\r\n                        TableBody={TableBody}\r\n                        tableHeaderData={columns}\r\n                        remove={remove}\r\n                        openEditModal={openEditModal}\r\n                        tableBodyData={get(data, `data[${responseDataKey}]`, [])}\r\n                        isFetching={isFetching}\r\n                        dataKey={dataKey}\r\n                    /></div>\r\n                    <Pagination page={page} setPage={setPage} totalItems={get(data, `data.result.count`, 0)}/>\r\n                </>}\r\n            </Section>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default GridView;"],"names":["Styled","styled","children","rest","fluid","useForm","register","handleSubmit","t","useTranslation","onSubmit","data","console","log","placeholder","type","className","w","sm","css","useState","width","setWidth","useEffect","ref","current","clientWidth","useRef","tableHeaderData","tableBodyData","TableBody","remove","openEditModal","isFetching","page","viewUrl","updateUrl","dataKey","map","th","i","get","pageSize","navigate","useNavigate","tr","td","j","value","row","index","onClick","size","color","includes","src","forbiddenImg","alt","GridModal","hide","visible","create","update","rowId","url","keyId","responseDataKey","ModalBody","useGetOneQuery","id","key","enabled","showErrorMsg","isLoading","onClose","formRequest","footer","memo","emptyImg","totalItems","limit","setPage","count","ceil","location","useLocation","pathname","search","range","item","classNames","GridTableBody","title","createUrl","isHideColumn","deleteUrl","deleteParam","useSearchParams","searchParams","openModal","setOpenModal","setRowId","columns","setColumns","usePaginateQuery","params","skip","isError","usePostQuery","listKeyId","createRequest","mutate","postLoading","usePutQuery","updateRequest","putLoading","useDeleteQuery","deleteRequest","deleteLoading","isEmpty","xs","lg","button","column","has","filter","col","isEqual","find","attributes","onSuccess","onError","EmptyPage","Swal","position","icon","backdrop","background","showConfirmButton","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","customClass","then","result","isConfirmed"],"sourceRoot":""}