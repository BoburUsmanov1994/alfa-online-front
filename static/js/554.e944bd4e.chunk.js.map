{"version":3,"file":"static/js/554.e944bd4e.chunk.js","mappings":"+RA2GA,EAjGsB,SAAC,GAAc,oBAAC,IAC3BA,GAAKC,EAAAA,EAAAA,KAALD,EAEDE,GAAiBC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIC,EAAAA,EAAAA,KAAID,EAAO,kBAAkB,kBAEhEE,GAAcC,EAAAA,EAAAA,UAAQ,iBAAM,CAC9B,CACIC,GAAI,EACJC,MAAO,mDACPC,KAAM,UAEV,CACIF,GAAI,EACJC,MAAO,sEACPC,KAAM,aAEX,KAEHC,EAAAA,EAAAA,YAAU,WACNT,EAAeI,KAChB,IAOH,OACI,+BACI,SAAC,IAAD,CACIM,UARM,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,IAAQC,MAAAA,OAAR,MAAgB,KAAhB,SAA0B,+BACxC,SAAC,IAAD,CAAOC,KAAM,OAAQC,KAAM,QAASC,MAAO,oGAAqBC,aAAcJ,GAAQT,EAAAA,EAAAA,KAAIQ,EAAM,QAAU,KACnGM,OAAQ,CAACC,UAAU,QAOlBC,gBAAiB,CACb,CACIb,GAAI,EACJc,IAAK,QACLb,MAAO,gBAEX,CACID,GAAI,EACJc,IAAK,SACLb,MAAO,iBAEX,CACID,GAAI,EACJc,IAAK,QACLb,MAAO,QACPc,OAAQ,gBAAEC,EAAF,EAAEA,IAAF,OAAWnB,EAAAA,EAAAA,KAAImB,EAAK,gBAAT,WAA8BnB,EAAAA,EAAAA,KAAImB,EAAK,kCAAvC,aAA4EnB,EAAAA,EAAAA,KAAImB,EAAK,mCAArF,cAA4HnB,EAAAA,EAAAA,KAAImB,EAAK,sCAAwCnB,EAAAA,EAAAA,KAAImB,EAAK,6BAE7M,CACIhB,GAAI,GACJc,IAAK,WACLb,MAAO,WACPc,OAAQ,gBAAEC,EAAF,EAAEA,IAAF,OAAWnB,EAAAA,EAAAA,KAAImB,EAAK,mBAAT,WAAiCnB,EAAAA,EAAAA,KAAImB,EAAK,qCAA1C,aAAkFnB,EAAAA,EAAAA,KAAImB,EAAK,sCAA3F,cAAqInB,EAAAA,EAAAA,KAAImB,EAAK,yCAA2CnB,EAAAA,EAAAA,KAAImB,EAAK,gCAEzN,CACIhB,GAAI,EACJc,IAAK,UACLb,MAAO,oBACPc,OAAQ,gBAAEE,EAAF,EAAEA,MAAF,OAAa,SAAC,IAAD,CAAcC,YAAa,OAAQC,kBAAmB,IAAKF,MAAOA,MAE3F,CACIjB,GAAI,EACJc,IAAK,MACLb,MAAO,gBACPc,OAAQ,gBAAEE,EAAF,EAAEA,MAAF,OAAa,SAAC,IAAD,CAAcC,YAAa,OAAQC,kBAAmB,IAAKF,MAAOA,MAE3F,CACIjB,GAAI,EACJc,IAAK,UACLb,MAAO,mDACPc,OAAQ,gBAAEE,EAAF,EAAEA,MAAOD,EAAT,EAASA,IAAT,MAAwC,UAAtBnB,EAAAA,EAAAA,KAAImB,EAAK,WAC/B,SAAC,IAAD,CAAcE,YAAa,OAAQC,kBAAmB,IAAKF,MAAOA,IAAW,IAErF,CACIjB,GAAI,EACJc,IAAK,SACLb,MAAO,WAIfmB,MAAOC,EAAAA,EAAAA,UACPC,IAAKC,EAAAA,EAAAA,UACLtB,MAAOT,EAAE,yBACTgC,gBAAiB,cACjBC,QAAS,cACTC,UAAW,gBACXC,UAAW,gBACXC,cAAY,EACZC,QAAS,eACTC,UAAWP,EAAAA,EAAAA,YACXQ,YAAa,oBChGvBC,EAASC,EAAAA,GAAAA,IAAH,wBAUZ,EARiB,SAAC,GAAe,IAAXC,EAAU,oBAC5B,OACI,SAACF,GAAD,kBAAYE,GAAZ,cACI,SAAC,EAAD","sources":["modules/agreement/containers/osgop/ListContainer.jsx","modules/agreement/pages/osgop/ListPage.jsx"],"sourcesContent":["import React, {useEffect, useMemo} from 'react';\r\nimport { useStore} from \"../../../../store\";\r\nimport {get} from \"lodash\";\r\nimport GridView from \"../../../../containers/grid-view/grid-view\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport Field from \"../../../../containers/form/field\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nconst ListContainer = ({...rest}) => {\r\n    const {t} = useTranslation()\r\n\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const breadcrumbs = useMemo(() => [\r\n        {\r\n            id: 1,\r\n            title: 'Продукты',\r\n            path: '/osgop',\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Все продукты',\r\n            path: '/osgop',\r\n        }\r\n    ], [])\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n    const ModalBody = ({data, rowId = null}) => <>\r\n        <Field name={'name'} type={'input'} label={'Название продукта'} defaultValue={rowId ? get(data, 'name') : null}\r\n               params={{required: true}}/>\r\n    </>\r\n\r\n    return (\r\n        <>\r\n            <GridView\r\n                ModalBody={ModalBody}\r\n                tableHeaderData={[\r\n                    {\r\n                        id: 3,\r\n                        key: 'seria',\r\n                        title: 'Policy seria',\r\n                    },\r\n                    {\r\n                        id: 4,\r\n                        key: 'number',\r\n                        title: 'Policy number',\r\n                    },\r\n                    {\r\n                        id: 5,\r\n                        key: 'owner',\r\n                        title: 'Owner',\r\n                        render: ({row}) => get(row, 'owner.person') ? `${get(row, 'owner.person.fullName.lastname')} ${get(row, 'owner.person.fullName.firstname')}  ${get(row, 'owner.person.fullName.middlename')}` : get(row, 'owner.organization.name')\r\n                    },\r\n                    {\r\n                        id: 55,\r\n                        key: 'insurant',\r\n                        title: 'Isnurant',\r\n                        render: ({row}) => get(row, 'insurant.person') ? `${get(row, 'insurant.person.fullName.lastname')} ${get(row, 'insurant.person.fullName.firstname')}  ${get(row, 'insurant.person.fullName.middlename')}` : get(row, 'insurant.organization.name')\r\n                    },\r\n                    {\r\n                        id: 6,\r\n                        key: 'premium',\r\n                        title: 'Insurance premium',\r\n                        render: ({value}) => <NumberFormat displayType={'text'} thousandSeparator={' '} value={value}/>\r\n                    },\r\n                    {\r\n                        id: 7,\r\n                        key: 'sum',\r\n                        title: 'Insurance sum',\r\n                        render: ({value}) => <NumberFormat displayType={'text'} thousandSeparator={' '} value={value}/>\r\n                    },\r\n                    {\r\n                        id: 8,\r\n                        key: 'premium',\r\n                        title: 'Оплачено',\r\n                        render: ({value, row}) => get(row, 'status') == 'payed' ?\r\n                            <NumberFormat displayType={'text'} thousandSeparator={' '} value={value}/> : 0\r\n                    },\r\n                    {\r\n                        id: 9,\r\n                        key: 'status',\r\n                        title: 'Status',\r\n                    },\r\n\r\n                ]}\r\n                keyId={KEYS.osgopList}\r\n                url={URLS.osgopList}\r\n                title={t('Osgop agreements list')}\r\n                responseDataKey={'result.docs'}\r\n                viewUrl={'/osgop/view'}\r\n                createUrl={'/osgop/create'}\r\n                updateUrl={'/osgop/update'}\r\n                isHideColumn\r\n                dataKey={'osgop_formId'}\r\n                deleteUrl={URLS.osgopDelete}\r\n                deleteParam={'osgop_formId'}\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport ListContainer from \"../../containers/osgop/ListContainer\";\r\n\r\nconst Styled = styled.div`\r\n`;\r\nconst ListPage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <ListContainer/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default ListPage;"],"names":["t","useTranslation","setBreadcrumbs","useStore","state","get","breadcrumbs","useMemo","id","title","path","useEffect","ModalBody","data","rowId","name","type","label","defaultValue","params","required","tableHeaderData","key","render","row","value","displayType","thousandSeparator","keyId","KEYS","url","URLS","responseDataKey","viewUrl","createUrl","updateUrl","isHideColumn","dataKey","deleteUrl","deleteParam","Styled","styled","rest"],"sourceRoot":""}