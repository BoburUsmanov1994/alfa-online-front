{"version":3,"file":"static/js/315.1b1d06f0.chunk.js","mappings":"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","sources":["modules/agreement/containers/osgor/UpdateContainer.jsx","modules/agreement/pages/osgor/UpdatePage.jsx"],"sourcesContent":["import React, {useEffect, useMemo, useState} from 'react';\r\nimport {useSettingsStore, useStore} from \"../../../../store\";\r\nimport {find, get, head, isEmpty, isEqual, isNil, round, upperCase} from \"lodash\";\r\nimport Panel from \"../../../../components/panel\";\r\nimport Search from \"../../../../components/search\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport Section from \"../../../../components/section\";\r\nimport Title from \"../../../../components/ui/title\";\r\nimport Button from \"../../../../components/ui/button\";\r\nimport Form from \"../../../../containers/form/form\";\r\nimport Flex from \"../../../../components/flex\";\r\nimport Field from \"../../../../containers/form/field\";\r\nimport {useGetAllQuery, usePostQuery, usePutQuery} from \"../../../../hooks/api\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport {getSelectOptionsListFromData} from \"../../../../utils\";\r\nimport {OverlayLoader} from \"../../../../components/loader\";\r\nimport qrcodeImg from \"../../../../assets/images/qrcode.png\"\r\nimport dayjs from \"dayjs\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst getEndDateByInsuranceTerm = (term, startDate) => {\r\n    if (!isNil(term)) {\r\n        if (get(term, 'prefix') == 'day') {\r\n            return dayjs(startDate).add(get(term, 'value') - 1, get(term, 'prefix')).toDate()\r\n        }\r\n        if (get(term, 'prefix') == 'month') {\r\n            return dayjs(startDate).add(get(term, 'value'), get(term, 'prefix')).subtract(1, 'day').toDate()\r\n        }\r\n        if (get(term, 'prefix') == 'year') {\r\n            return dayjs(startDate).add(get(term, 'value'), get(term, 'prefix')).subtract(1, 'day').toDate()\r\n        }\r\n\r\n    }\r\n    return dayjs()\r\n}\r\n\r\nconst UpdateContainer = ({form_id}) => {\r\n    const [person, setPerson] = useState(null)\r\n    const [agentId, setAgentId] = useState(null)\r\n    const [organization, setOrganization] = useState(null)\r\n    const [insurant, setInsurant] = useState('person')\r\n    const [passportSeries, setPassportSeries] = useState(null)\r\n    const [passportNumber, setPassportNumber] = useState(null)\r\n    const [birthDate, setBirthDate] = useState(null)\r\n    const [inn, setInn] = useState(null)\r\n    const [regionId, setRegionId] = useState(null)\r\n    const [agencyId, setAgencyId] = useState(null)\r\n    const [insuranceTerm, setInsuranceTerm] = useState(null)\r\n    const [policeStartDate, setPoliceStartDate] = useState(dayjs())\r\n    const [oked, setOked] = useState(null)\r\n    const [fotSum, setFotSum] = useState(0)\r\n    const [risk, setRisk] = useState(null)\r\n    const [insurancePremium, setInsurancePremium] = useState(0)\r\n    const [rpmPercent, setRpmPercent] = useState(5)\r\n    const [rewardPercent, setRewardPercent] = useState(25)\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const {t} = useTranslation()\r\n    const navigate = useNavigate();\r\n    const breadcrumbs = useMemo(() => [{\r\n        id: 1, title: 'OSGOR', path: '/osgor/list',\r\n    }, {\r\n        id: 2, title: 'Добавить OSGOR', path: '/osgor/create',\r\n    }], [])\r\n\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n    const {data, isLoading} = useGetAllQuery({\r\n        key: KEYS.osgorView,\r\n        url: URLS.osgorView,\r\n        params: {\r\n            params: {\r\n                osgor_formId: form_id\r\n            }\r\n        },\r\n        enabled: !!(form_id)\r\n    })\r\n\r\n    const {data: filials, isLoading: isLoadingFilials} = useGetAllQuery({key: KEYS.agencies, url: URLS.agencies})\r\n    const filialList = getSelectOptionsListFromData(get(filials, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: insuranceTerms, isLoading: isLoadingInsuranceTerms} = useGetAllQuery({\r\n        key: KEYS.insuranceTerms, url: URLS.insuranceTerms\r\n    })\r\n    const insuranceTermsList = getSelectOptionsListFromData(get(insuranceTerms, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: country, isLoading: isLoadingCountry} = useGetAllQuery({\r\n        key: KEYS.countries, url: URLS.countries\r\n    })\r\n    const countryList = getSelectOptionsListFromData(get(country, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: region, isLoading: isLoadingRegion} = useGetAllQuery({\r\n        key: KEYS.regions, url: URLS.regions\r\n    })\r\n    const regionList = getSelectOptionsListFromData(get(region, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: genders} = useGetAllQuery({\r\n        key: KEYS.genders, url: URLS.genders\r\n    })\r\n    const genderList = getSelectOptionsListFromData(get(genders, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: residentTypes} = useGetAllQuery({\r\n        key: KEYS.residentTypes, url: URLS.residentTypes\r\n    })\r\n    const residentTypeList = getSelectOptionsListFromData(get(residentTypes, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: okeds} = useGetAllQuery({\r\n        key: KEYS.okeds, url: URLS.okeds\r\n    })\r\n    const okedList = getSelectOptionsListFromData(get(okeds, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: ownershipForms} = useGetAllQuery({\r\n        key: KEYS.ownershipForms, url: URLS.ownershipForms\r\n    })\r\n    const ownershipFormList = getSelectOptionsListFromData(get(ownershipForms, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: areaTypes} = useGetAllQuery({\r\n        key: KEYS.areaTypes, url: URLS.areaTypes\r\n    })\r\n    const areaTypesList = getSelectOptionsListFromData(get(areaTypes, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: district} = useGetAllQuery({\r\n        key: [KEYS.districts, regionId],\r\n        url: URLS.districts,\r\n        params: {\r\n            params: {\r\n                region: regionId\r\n            }\r\n        },\r\n        enabled: !!(regionId || get(person, 'regionId'))\r\n    })\r\n    const districtList = getSelectOptionsListFromData(get(district, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: activity} = useGetAllQuery({\r\n        key: [KEYS.activityAndRisk, oked],\r\n        url: URLS.activityAndRisk,\r\n        params: {\r\n            params: {\r\n                oked\r\n            }\r\n        },\r\n        enabled: !!(oked)\r\n    })\r\n\r\n    const {data: agents} = useGetAllQuery({\r\n        key: [KEYS.agents, agencyId],\r\n        url: URLS.agents,\r\n        params: {\r\n            params: {\r\n                branch: agencyId\r\n            }\r\n        },\r\n        enabled: !!(agencyId)\r\n    })\r\n    const agentsList = getSelectOptionsListFromData(get(agents, `data.result`, []), 'id', 'name')\r\n    const activityList = getSelectOptionsListFromData([{\r\n        oked: get(activity, `data.result.oked`),\r\n        name: get(activity, `data.result.name`)\r\n    }], 'oked', 'name')\r\n\r\n    const {\r\n        mutate: getPersonalInfoRequest, isLoading: isLoadingPersonalInfo\r\n    } = usePostQuery({listKeyId: KEYS.personalInfoProvider})\r\n\r\n    const {\r\n        mutate: getOrganizationInfoRequest, isLoading: isLoadingOrganizationInfo\r\n    } = usePostQuery({listKeyId: KEYS.organizationInfoProvider})\r\n\r\n    const {\r\n        mutate: calculatePremiumRequest\r\n    } = usePostQuery({listKeyId: KEYS.osgorCalculate,hideSuccessToast:true})\r\n    const {\r\n        mutate: updateRequest,isLoading:isLoadingPatch\r\n    } = usePutQuery({listKeyId: KEYS.osgorEdit})\r\n\r\n    const getInfo = () => {\r\n        getPersonalInfoRequest({\r\n                url: URLS.personalInfoProvider, attributes: {\r\n                    birthDate: dayjs(birthDate).format('YYYY-MM-DD'), passportSeries, passportNumber\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setPerson(get(data, 'result'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const getOrgInfo = () => {\r\n        getOrganizationInfoRequest({\r\n                url: URLS.organizationInfoProvider, attributes: {\r\n                    inn\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setOrganization(get(data, 'result'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const calculatePremium = () => {\r\n        calculatePremiumRequest({\r\n                url: URLS.osgorCalculate, attributes: {\r\n                    risk,\r\n                    insuranceSum: fotSum,\r\n                    insuranceTermId:insuranceTerm\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setInsurancePremium(get(data, 'result.insurancePremium'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const getFieldData = (name, value) => {\r\n        if (isEqual(name, 'insurant.person.regionId')) {\r\n            setRegionId(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].insuranceTermId')) {\r\n            setInsuranceTerm(value)\r\n        }\r\n        if (isEqual(name, 'insurant.organization.oked') || isEqual(name, 'insurant.person.oked')) {\r\n            setOked(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].risk')) {\r\n            setRisk(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].rpm')) {\r\n            setRpmPercent(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].agentReward')) {\r\n            setRewardPercent(value)\r\n        }\r\n        if (isEqual(name, 'agencyId')) {\r\n            setAgencyId(value)\r\n        }\r\n        if (isEqual(name, 'agentId')) {\r\n            setAgentId(value)\r\n        }\r\n    }\r\n    const update = ({data}) => {\r\n        const {\r\n            activityRisk,\r\n            birthDate,\r\n            fot,\r\n            funeralExpensesSum,\r\n            passportNumber,\r\n            passportSeries,\r\n            rewardPercent,\r\n            rewardSum,\r\n            risk,\r\n            rpmPercent,\r\n            rpmSum,\r\n            policies,\r\n            agentId,\r\n            insurant: insurantType,\r\n            ...rest\r\n        } = data\r\n        updateRequest({\r\n                url: URLS.osgorEdit, attributes: {\r\n                    agentId:String(agentId),\r\n                    regionId: isEqual(insurant, 'person') ? get(insurantType, 'person.regionId') : get(insurantType, 'organization.regionId'),\r\n                    sum: get(head(policies), 'insuranceSum', 0),\r\n                    contractStartDate: get(head(policies), 'startDate'),\r\n                    contractEndDate: get(head(policies), 'endDate'),\r\n                    insurant: isEqual(insurant, 'person') ? {\r\n                        person: {\r\n                            passportData: get(insurantType, 'person.passportData'),\r\n                            fullName: get(insurantType, 'person.fullName'),\r\n                            regionId: get(insurantType, 'person.regionId'),\r\n                            gender: get(insurantType, 'person.gender'),\r\n                            birthDate: get(insurantType, 'person.birthDate'),\r\n                            address: get(insurantType, 'person.address'),\r\n                            residentType: get(insurantType, 'person.residentType'),\r\n                            countryId: get(insurantType, 'person.countryId'),\r\n                            phone: get(insurantType, 'person.phone'),\r\n                            email: isEmpty(get(insurantType, 'person.email')) ? undefined :get(insurantType, 'person.email'),\r\n                            oked: String(get(insurantType, 'person.oked')),\r\n                        }\r\n                    } : {\r\n                        organization: {\r\n                            ...get(insurantType, 'organization'),\r\n                            oked: String(get(insurantType, 'organization.oked')),\r\n                            email: isEmpty(get(insurantType, 'organization.email')) ? undefined :get(insurantType, 'organization.email'),\r\n                        }\r\n                    },\r\n                    policies: [\r\n                        {\r\n                            ...head(policies),\r\n                            insuranceRate: get(data, 'comission', 0),\r\n                            fot: fotSum,\r\n                            funeralExpensesSum: parseInt(funeralExpensesSum),\r\n                            agentReward:parseInt(get(head(policies), 'agentReward',0)),\r\n                            risk:parseInt(get(head(policies), 'risk',0))\r\n                        }\r\n                    ],\r\n                    ...rest,\r\n                    osgor_formId: parseInt(form_id)\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data: response}) => {\r\n                    if (get(response, 'result.osgor_formId')) {\r\n                        navigate(`/osgor/view/${get(response, 'result.osgor_formId')}`);\r\n                    } else {\r\n                        navigate(`/osgor`);\r\n                    }\r\n                },\r\n            }\r\n        )\r\n    }\r\n    useEffect(() => {\r\n        if (risk && fotSum && insuranceTerm) {\r\n            calculatePremium()\r\n        }\r\n    }, [risk, fotSum,insuranceTerm])\r\n    useEffect(() => {\r\n        if (get(data, 'data.result.insurant.organization.oked')) {\r\n            setOked(get(data, 'data.result.insurant.organization.oked'))\r\n        }\r\n        if (get(data, 'data.result.insurant.person.oked')) {\r\n            setOked(get(data, 'data.result.insurant.person.oked'))\r\n        }\r\n        if (get(data, 'data.result.policies[0].fot')) {\r\n            setFotSum(get(data, 'data.result.policies[0].fot'))\r\n        }\r\n        if (get(data, 'data.result.policies[0].insurancePremium')) {\r\n            setInsurancePremium(get(data, 'data.result.policies[0].insurancePremium'))\r\n        }\r\n        if (get(data, 'data.result.insurant.organization')) {\r\n            setInsurant('organization')\r\n            setOrganization(get(data, 'data.result.insurant.organization'))\r\n        }\r\n        if (get(data, 'data.result.insurant.person')) {\r\n            setInsurant('person')\r\n            setOrganization(get(data, 'data.result.insurant.person'))\r\n        }\r\n        if (get(data, 'data.result.agencyId')) {\r\n            setAgencyId(get(data, 'data.result.agencyId'))\r\n        }\r\n        if (get(data, 'data.result.insurant.organization.inn')) {\r\n            setInn(get(data, 'data.result.insurant.organization.inn'))\r\n        }\r\n        if (!isNil(get(data, 'data.result.policies[0].agentReward'))) {\r\n            setRewardPercent(get(data, 'data.result.policies[0].agentReward'))\r\n        }\r\n\r\n    }, [get(data, 'data.result')])\r\n\r\n\r\n    if (isLoadingFilials || isLoadingInsuranceTerms || isLoadingCountry || isLoadingRegion || isLoading) {\r\n        return <OverlayLoader/>\r\n    }\r\n\r\n    return (<>\r\n        {(isLoadingPersonalInfo || isLoadingOrganizationInfo,isLoadingPatch) && <OverlayLoader/>}\r\n        <Panel>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Search/>\r\n                </Col>\r\n            </Row>\r\n        </Panel>\r\n        <Section>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Title>Параметры полиса</Title>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Form formRequest={update} getValueFromField={(value, name) => getFieldData(name, value)}\r\n                          footer={<Flex className={'mt-32'}><Button onClick={() => navigate('/osgor')} type={'button'}\r\n                                                                    gray className={'mr-16'}>Назад</Button><Button\r\n                              type={'submit'}\r\n                              className={'mr-16'}>Сохранить</Button></Flex>}>\r\n                        <Row gutterWidth={60} className={'mt-32'}>\r\n                            <Col xs={4} style={{borderRight: '1px solid #DFDFDF'}}>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Статус</Col>\r\n                                    <Col xs={7}><Button green>{get(data, 'data.result.status')}</Button></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Филиал </Col>\r\n                                    <Col xs={7}><Field disabled defaultValue={get(data, 'data.result.agencyId')}\r\n                                                       params={{required: true}} options={filialList}\r\n                                                       property={{hideLabel: true}} type={'select'}\r\n                                                       name={'agencyId'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Серия договора:</Col>\r\n                                    <Col xs={7}><Field defaultValue={get(data, 'data.result.seria')}\r\n                                                       property={{hideLabel: true}} type={'input'}\r\n                                                       name={'seria'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Номер договора: </Col>\r\n                                    <Col xs={7}><Field defaultValue={get(data, 'data.result.number')}\r\n                                                       params={{required: true}} property={{hideLabel: true}}\r\n                                                       type={'input'}\r\n                                                       name={'number'}/></Col>\r\n                                </Row>\r\n\r\n\r\n                                {/*<Row align={'center'} className={'mb-25'}>*/}\r\n                                {/*    <Col xs={6} className={'text-center'}>*/}\r\n                                {/*        <img src={qrcodeImg} alt=\"\"/>*/}\r\n                                {/*    </Col>*/}\r\n                                {/*    <Col xs={6}>*/}\r\n                                {/*        <Button type={'button'}>Проверить полис</Button>*/}\r\n                                {/*    </Col>*/}\r\n                                {/*</Row>*/}\r\n                            </Col>\r\n                            <Col xs={4}>\r\n\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Страховая сумма: </Col>\r\n                                    <Col xs={7}><Field defaultValue={fotSum}\r\n                                                       property={{hideLabel: true, disabled: true}}\r\n                                                       type={'number-format-input'}\r\n                                                       name={'policies[0].insuranceSum'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Страховая премия: </Col>\r\n                                    <Col xs={7}><Field defaultValue={insurancePremium}\r\n                                                       property={{hideLabel: true, disabled: true}}\r\n                                                       type={'number-format-input'}\r\n                                                       name={'policies[0].insurancePremium'}/></Col>\r\n                                </Row>\r\n\r\n\r\n                            </Col>\r\n                            <Col xs={4}>\r\n\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Срок страхования:</Col>\r\n                                    <Col xs={7}><Field\r\n                                        defaultValue={get(data, 'data.result.policies[0].insuranceTermId')}\r\n                                        options={insuranceTermsList} params={{required: true}}\r\n                                        label={'Insurance term'} property={{hideLabel: true}}\r\n                                        type={'select'}\r\n                                        name={'policies[0].insuranceTermId'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Дата начала покрытия: </Col>\r\n                                    <Col xs={7}><Field\r\n                                        property={{\r\n                                            hideLabel: true,\r\n                                            onChange: (val) => setPoliceStartDate(val),\r\n                                            dateFormat: 'dd.MM.yyyy'\r\n                                        }}\r\n                                        type={'datepicker'}\r\n                                        name={'policies[0].startDate'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Дача окончания покрытия: </Col>\r\n                                    <Col xs={7}><Field\r\n                                        defaultValue={getEndDateByInsuranceTerm(find(get(insuranceTerms, `data.result`, []), (_insuranceTerm) => get(_insuranceTerm, 'id') == insuranceTerm), policeStartDate)}\r\n                                        disabled={!isEqual(insuranceTerm, 6)}\r\n                                        property={{hideLabel: true, dateFormat: 'dd.MM.yyyy'}} type={'datepicker'}\r\n                                        name={'policies[0].endDate'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Дата выдачи полиса: </Col>\r\n                                    <Col xs={7}><Field property={{hideLabel: true, dateFormat: 'dd.MM.yyyy'}}\r\n                                                       type={'datepicker'}\r\n                                                       name={'policies[0].issueDate'}/></Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                        <Row gutterWidth={60} className={'mt-15'}>\r\n                            <Col xs={12} className={'mb-15'}><Title>Страхователь</Title></Col>\r\n                            <Col xs={12}>\r\n                                <Row>\r\n                                    <Col xs={4}>\r\n                                        <Flex>\r\n                                            <h4 className={'mr-16'}>Страхователь</h4>\r\n                                            <Button onClick={() => setInsurant('person')}\r\n                                                    gray={!isEqual(insurant, 'person')} className={'mr-16'}\r\n                                                    type={'button'}>Физ. лицо</Button>\r\n                                            <Button onClick={() => setInsurant('organization')}\r\n                                                    gray={!isEqual(insurant, 'organization')} type={'button'}>Юр.\r\n                                                лицо</Button>\r\n                                        </Flex>\r\n                                    </Col>\r\n                                    <Col xs={8} className={'text-right'}>\r\n                                        {isEqual(insurant, 'person') && <Flex justify={'flex-end'}>\r\n                                            <Field\r\n                                                defaultValue={get(data,'data.result.insurant.person.passportData.seria')}\r\n                                                className={'mr-16'} style={{width: 75}}\r\n                                                property={{\r\n                                                    hideLabel: true,\r\n                                                    mask: 'aa',\r\n                                                    placeholder: 'AA',\r\n                                                    upperCase: true,\r\n                                                    maskChar: '_',\r\n                                                    onChange: (val) => setPassportSeries(upperCase(val))\r\n                                                }}\r\n                                                name={'passportSeries'}\r\n                                                type={'input-mask'}\r\n                                            />\r\n                                            <Field\r\n                                                defaultValue={get(data,'data.result.insurant.person.passportData.number')}\r\n                                                property={{\r\n                                                hideLabel: true,\r\n                                                mask: '9999999',\r\n                                                placeholder: '1234567',\r\n                                                maskChar: '_',\r\n                                                onChange: (val) => setPassportNumber(val)\r\n                                            }} name={'passportNumber'} type={'input-mask'}/>\r\n\r\n                                            <Field\r\n                                                defaultValue={get(data,'data.result.insurant.person.birthDate')}\r\n                                                className={'ml-15'}\r\n                                                   property={{\r\n                                                       hideLabel: true,\r\n                                                       placeholder: 'Дата рождения',\r\n                                                       onChange: (e) => setBirthDate(e)\r\n                                                   }}\r\n                                                   name={'birthDate'} type={'datepicker'}/>\r\n                                            <Button onClick={getInfo} className={'ml-15'} type={'button'}>Получить\r\n                                                данные</Button>\r\n                                        </Flex>}\r\n                                        {isEqual(insurant, 'organization') && <Flex justify={'flex-end'}>\r\n                                            <Field defaultValue={get(data,'data.result.insurant.organization.inn')} property={{\r\n                                                hideLabel: true,\r\n                                                mask: '999999999',\r\n                                                placeholder: 'Inn',\r\n                                                maskChar: '_',\r\n                                                onChange: (val) => setInn(val)\r\n                                            }} name={'inn'} type={'input-mask'}/>\r\n                                            <Button onClick={getOrgInfo} className={'ml-15'} type={'button'}>Получить\r\n                                                данные</Button>\r\n                                        </Flex>}\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            <Col xs={12}>\r\n                                <hr className={'mt-15 mb-15'}/>\r\n                            </Col>\r\n                            {isEqual(insurant, 'person') && <>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'firstNameLatin',get(data,'data.result.insurant.person.fullName.firstname'))}\r\n                                           label={'Firstname'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.fullName.firstname'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'lastNameLatin',get(data,'data.result.insurant.person.fullName.lastname'))}\r\n                                           label={'Lastname'} type={'input'}\r\n                                           name={'insurant.person.fullName.lastname'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'middleNameLatin',get(data,'data.result.insurant.person.fullName.middlename'))}\r\n                                           label={'Middlename'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.fullName.middlename'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(person, 'pinfl',get(data,'data.result.insurant.person.passportData.pinfl'))} label={'ПИНФЛ'} type={'input'}\r\n                                           name={'insurant.person.passportData.pinfl'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} property={{\r\n                                        mask: 'aa',\r\n                                        placeholder: 'AA',\r\n                                        maskChar: '_'\r\n                                    }} defaultValue={passportSeries ?? get(data,'data.result.insurant.person.passportData.seria')} label={'Passport seria'} type={'input-mask'}\r\n                                           name={'insurant.person.passportData.seria'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} property={{\r\n                                        mask: '9999999',\r\n                                        placeholder: '1234567',\r\n                                        maskChar: '_'\r\n                                    }} defaultValue={passportNumber??get(data,'data.result.insurant.person.passportData.number')} label={'Passport number'} type={'input-mask'}\r\n                                           name={'insurant.person.passportData.number'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           defaultValue={dayjs(get(person, 'birthDate',get(data,'data.result.insurant.person.birthDate'))).toDate()}\r\n                                           label={'Birth date'}\r\n                                           type={'datepicker'}\r\n                                           name={'insurant.person.birthDate'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           defaultValue={get(person, 'gender',get(data,'data.result.insurant.person.gender'))}\r\n                                           options={genderList}\r\n                                           label={'Gender'}\r\n                                           type={'select'}\r\n                                           name={'insurant.person.gender'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        options={countryList}\r\n                                        defaultValue={get(person, 'birthCountry',get(data,'data.result.insurant.person.countryId'))}\r\n                                        label={'Country'}\r\n                                        type={'select'}\r\n                                        name={'insurant.person.countryId'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        options={regionList}\r\n                                        defaultValue={get(person, 'regionId',get(data,'data.result.insurant.person.regionId'))}\r\n                                        label={'Region'}\r\n                                        type={'select'}\r\n                                        name={'insurant.person.regionId'}/>\r\n                                </Col>\r\n                                {/*<Col xs={3} className={'mb-25'}>*/}\r\n                                {/*    <Field*/}\r\n                                {/*        options={districtList}*/}\r\n                                {/*        defaultValue={get(person, 'districtId',get(data,'data.result.insurant.person.districtId'))}*/}\r\n                                {/*        label={'District'}*/}\r\n                                {/*        type={'select'}*/}\r\n                                {/*        name={'insurant.person.districtId'}/>*/}\r\n                                {/*</Col>*/}\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{required: true}}\r\n                                        options={areaTypesList}\r\n                                        defaultValue={get(person, 'areaTypeId',get(data,'data.result.areaTypeId'))}\r\n                                        label={'Тип местности'}\r\n                                        type={'select'}\r\n                                        name={'areaTypeId'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           options={residentTypeList}\r\n                                           defaultValue={get(person, 'residentType',get(data,'data.result.insurant.person.residentType'))}\r\n                                           label={'Resident type'}\r\n                                           type={'select'}\r\n                                           name={'insurant.person.residentType'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           defaultValue={get(person, 'address',get(data,'data.result.insurant.person.address'))}\r\n                                           label={'Address'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.address'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{\r\n                                            required: true,\r\n                                            pattern: {\r\n                                                value: /^998(9[012345789]|6[125679]|7[01234569])[0-9]{7}$/,\r\n                                                message: 'Invalid format'\r\n                                            }\r\n                                        }}\r\n                                        defaultValue={get(person, 'phone',get(data,'data.result.insurant.person.phone'))}\r\n                                        label={'Phone'}\r\n                                        type={'input'}\r\n                                        property={{placeholder: '998XXXXXXXXX'}}\r\n                                        name={'insurant.person.phone'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        defaultValue={get(person, 'email',get(data,'data.result.insurant.person.email'))}\r\n                                        label={'Email'}\r\n                                        type={'input'}\r\n                                        name={'insurant.person.email'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        defaultValue={parseInt(get(data,'data.result.insurant.person.oked'))}\r\n                                        options={okedList}\r\n                                        params={{required: true}}\r\n                                        label={'Oked'}\r\n                                        type={'select'}\r\n                                        name={'insurant.person.oked'}/>\r\n                                </Col>\r\n                            </>}\r\n                            {isEqual(insurant, 'organization') && <>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} label={'INN'} defaultValue={inn ?? get(data,'data.result.insurant.organization.inn')} property={{\r\n                                        mask: '999999999',\r\n                                        placeholder: 'Inn',\r\n                                        maskChar: '_'\r\n                                    }} name={'insurant.organization.inn'} type={'input-mask'}/>\r\n\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(organization, 'name')}\r\n                                           label={'Наименование'} type={'input'}\r\n                                           name={'insurant.organization.name'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(data,'data.result.insurant.organization.representativeName')} label={'Руководитель'} type={'input'}\r\n                                           name={'insurant.organization.representativeName'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(data,'data.result.insurant.organization.position')} label={'Должность'} type={'input'}\r\n                                           name={'insurant.organization.position'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{required: true}}\r\n                                        options={areaTypesList}\r\n                                        defaultValue={get(data,'data.result.areaTypeId')}\r\n                                        label={'Тип местности'}\r\n                                        type={'select'}\r\n                                        name={'areaTypeId'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(organization, 'address')} params={{required: true}} label={'Address'} type={'input'}\r\n                                           name={'insurant.organization.address'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(organization, 'phone')} params={{\r\n                                        required: true,\r\n                                        pattern: {value:/^998(9[012345789]|6[125679]|7[01234569])[0-9]{7}$/,message: 'Invalid format'}\r\n                                    }}\r\n                                           label={'Телефон'} type={'input'}\r\n                                           name={'insurant.organization.phone'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(organization, 'email')} label={'Email'} type={'input'}\r\n                                           name={'insurant.organization.email'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           options={okedList}\r\n                                           defaultValue={parseInt(get(organization, 'oked'))}\r\n                                           label={'ОКЭД'}\r\n                                           type={'select'}\r\n                                           name={'insurant.organization.oked'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(data,'data.result.insurant.organization.checkingAccount')} label={'Расчетный счет'} type={'input'}\r\n                                           name={'insurant.organization.checkingAccount'}/>\r\n                                </Col>\r\n                                <Col xs={3}><Field defaultValue={get(data,'data.result.insurant.organization.regionId')} label={'Область'} params={{required: true}} options={regionList}\r\n                                                   type={'select'}\r\n                                                   name={'insurant.organization.regionId'}/></Col>\r\n                                <Col xs={3}><Field defaultValue={get(data,'data.result.insurant.organization.ownershipFormId')} label={'Форма собственности'} params={{required: true}}\r\n                                                   options={ownershipFormList}\r\n                                                   type={'select'}\r\n                                                   name={'insurant.organization.ownershipFormId'}/></Col>\r\n                            </>}\r\n                        </Row>\r\n                        <Row gutterWidth={60} className={'mt-15'}>\r\n                            <Col xs={12} className={'mb-15'}><Title>Вид деятельности</Title></Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(head(activityList),'value')}\r\n                                    options={activityList}\r\n                                    label={'Вид деятельности (по правилам)'}\r\n                                    type={'select'}\r\n                                    name={'activityRisk'}/>\r\n                            </Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(data, 'data.result.policies[0].risk')}\r\n                                    options={getSelectOptionsListFromData(get(activity, 'data.result.risks', []), 'number', 'number')}\r\n                                    label={'Класс проф. риска'}\r\n                                    type={'select'}\r\n                                    name={'policies[0].risk'}/>\r\n                            </Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(find(get(activity, 'data.result.risks', []), _risk => get(_risk, 'number') == risk), 'coeficient') ?? get(data, 'data.result.policies[0].insuranceRate',0)}\r\n                                    property={{disabled: true}}\r\n                                    label={'Коэффициент страхового тарифа'}\r\n                                    type={'input'}\r\n                                    name={'comission'}/>\r\n                            </Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(data, 'data.result.policies[0].funeralExpensesSum',0)}\r\n                                    label={'Расходы на погребение'}\r\n                                    type={'number-format-input'}\r\n                                    name={'funeralExpensesSum'}/>\r\n                            </Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(data, 'data.result.policies[0].fot',0)}\r\n                                    property={{onChange: (val) => setFotSum(val)}}\r\n                                    label={'Фонд оплаты труда'}\r\n                                    type={'number-format-input'}\r\n                                    name={'fot'}/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutterWidth={60} className={'mt-15'}>\r\n                            <Col xs={12} className={'mb-15'}><Title>Агентсткое вознограждение и РПМ</Title></Col>\r\n                            <Col xs={8}>\r\n                                <Row>\r\n                                    <Col xs={12} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={get(data, 'data.result.agentId')}\r\n                                            options={[{label:t('No agent'),value:undefined},...agentsList]}\r\n                                            label={'Агент'}\r\n                                            type={'select'}\r\n                                            name={'agentId'}/>\r\n                                    </Col>\r\n\r\n                                    <Col xs={6} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={isEqual(agentId,undefined) ? 0 : get(data,'data.result.policies[0].agentReward',25)}\r\n                                            label={'Вознограждение %'}\r\n                                            property={{type:'number',disabled:isEqual(agentId,undefined)}}\r\n                                            type={'input'}\r\n                                            name={'policies[0].agentReward'}/>\r\n                                    </Col>\r\n                                    <Col xs={6} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={5}\r\n                                            property={{disabled:true}}\r\n                                            label={'Отчисления в РПМ  %'}\r\n                                            type={'input'}\r\n                                            name={'policies[0].rpm'}/>\r\n                                    </Col>\r\n                                    <Col xs={6} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={round(rewardPercent * insurancePremium / 100, 2)}\r\n                                            property={{disabled: true}}\r\n                                            label={'Сумма'}\r\n                                            type={'number-format-input'}\r\n                                            name={'rewardSum'}/>\r\n                                    </Col>\r\n                                    <Col xs={6} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={round(rpmPercent * insurancePremium / 100, 2)}\r\n                                            property={{disabled: true}}\r\n                                            label={'Сумма'}\r\n                                            type={'number-format-input'}\r\n                                            name={'rpmSum'}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Section>\r\n    </>);\r\n};\r\n\r\nexport default UpdateContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport UpdateContainer from \"../../containers/osgor/UpdateContainer\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst Styled = styled.div`\r\n  .w-100 {\r\n    & > div {\r\n      width: 100%;\r\n    }\r\n  }\r\n  .form-group {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\nconst UpdatePage = ({...rest}) => {\r\n    const {form_id = null} = useParams();\r\n    return (\r\n        <Styled {...rest}>\r\n            <UpdateContainer form_id={form_id}/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default UpdatePage;"],"names":["getEndDateByInsuranceTerm","term","startDate","isNil","get","dayjs","add","toDate","subtract","_ref","_get","form_id","person","setPerson","useState","agentId","setAgentId","organization","setOrganization","insurant","setInsurant","passportSeries","setPassportSeries","passportNumber","setPassportNumber","birthDate","setBirthDate","inn","setInn","regionId","setRegionId","agencyId","setAgencyId","insuranceTerm","setInsuranceTerm","policeStartDate","setPoliceStartDate","oked","setOked","fotSum","setFotSum","risk","setRisk","insurancePremium","setInsurancePremium","rpmPercent","setRpmPercent","rewardPercent","setRewardPercent","setBreadcrumbs","useStore","state","t","useTranslation","navigate","useNavigate","breadcrumbs","useMemo","id","title","path","useEffect","data","isLoading","useGetAllQuery","key","KEYS","osgorView","url","URLS","params","osgor_formId","enabled","filials","isLoadingFilials","agencies","filialList","getSelectOptionsListFromData","insuranceTerms","isLoadingInsuranceTerms","insuranceTermsList","country","isLoadingCountry","countries","countryList","region","isLoadingRegion","regions","regionList","genders","genderList","residentTypes","residentTypeList","okeds","okedList","ownershipForms","ownershipFormList","areaTypes","areaTypesList","district","districts","activity","activityAndRisk","agents","branch","agentsList","activityList","name","mutate","getPersonalInfoRequest","isLoadingPersonalInfo","usePostQuery","listKeyId","personalInfoProvider","getOrganizationInfoRequest","isLoadingOrganizationInfo","organizationInfoProvider","calculatePremiumRequest","osgorCalculate","hideSuccessToast","updateRequest","isLoadingPatch","usePutQuery","osgorEdit","attributes","insuranceSum","insuranceTermId","onSuccess","_ref4","_jsx","OverlayLoader","_jsxs","_Fragment","children","Panel","Row","Col","xs","Search","Section","Title","Form","formRequest","_ref5","activityRisk","fot","funeralExpensesSum","rewardSum","rpmSum","policies","insurantType","rest","String","isEqual","sum","head","contractStartDate","contractEndDate","passportData","fullName","gender","address","residentType","countryId","phone","email","isEmpty","undefined","insuranceRate","parseInt","agentReward","_ref6","response","concat","getValueFromField","value","getFieldData","footer","Flex","className","Button","onClick","type","gray","gutterWidth","style","borderRight","align","green","Field","disabled","defaultValue","required","options","property","hideLabel","label","onChange","val","dateFormat","find","_insuranceTerm","justify","width","mask","placeholder","upperCase","maskChar","e","getInfo","format","_ref2","getOrgInfo","_ref3","pattern","message","_risk","round","Styled","styled","div","_templateObject","_taggedTemplateLiteral","useParams","UpdateContainer"],"sourceRoot":""}