{"version":3,"file":"static/js/315.c1d08770.chunk.js","mappings":"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","sources":["components/panel/index.jsx","components/search/index.jsx","components/section/index.jsx","components/ui/title/index.jsx","modules/agreement/containers/osgor/UpdateContainer.jsx","modules/agreement/pages/osgor/UpdatePage.jsx","utils/index.js"],"sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"react-grid-system\";\r\n\r\nconst Styled = styled.div`\r\n  padding: 12px 15px;\r\n  background-color: #F7F7F7;\r\n  width: 100%;\r\n  display: block;\r\n`;\r\n\r\nconst Panel = ({\r\n                   children,\r\n                   ...rest\r\n               }) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <Container fluid>\r\n                {children}\r\n            </Container>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Panel;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst Styled = styled.form`\r\n  display: flex;\r\n\r\n  .search-form-input {\r\n    padding: 15px 25px;\r\n    border: 1px solid #CDCDCD;\r\n    border-radius: 5px 0px 0px 5px;\r\n    display: block;\r\n    width: 100%;\r\n    outline: none;\r\n    transition: 0.2s ease;\r\n    font-size: 16px;\r\n    font-family: 'Gilroy-Regular', sans-serif;\r\n\r\n    &:focus {\r\n      border-color: #13D6D1;\r\n    }\r\n  }\r\n\r\n  .search-form-btn {\r\n    padding: 15px 20px;\r\n    min-width: 175px;\r\n    text-align: center;\r\n    border: none;\r\n    background: #13D6D1;\r\n    border-radius: 0px 5px 5px 0px;\r\n    color: #fff;\r\n    font-size: 16px;\r\n    font-family: 'Gilroy-Medium', sans-serif;\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst Search = ({\r\n                    ...rest\r\n                }) => {\r\n    const {register, handleSubmit} = useForm();\r\n    const {t} = useTranslation()\r\n    const onSubmit = (data) => {\r\n        console.log('search', data)\r\n    }\r\n    return (\r\n        <Styled onSubmit={handleSubmit(onSubmit)} {...rest}>\r\n            <input placeholder={t('Поиск')}  {...register(\"search\")} type=\"text\" className={'search-form-input'}/>\r\n            <button className={'search-form-btn'} type={'submit'}>{t(\"Найти\")}</button>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"react-grid-system\";\r\n\r\nconst Styled = styled.section`\r\n  padding: 25px 15px;\r\n  background-color: #fff;\r\n  \r\n`;\r\nconst Section = ({\r\n                     children,\r\n                     ...rest\r\n                 }) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <Container fluid>\r\n                {children}\r\n            </Container>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Section;","import React, {useEffect, useState,useRef} from 'react';\r\nimport styled,{css} from \"styled-components\";\r\n\r\nconst Styled = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  h2{\r\n    padding-right: 25px;\r\n    font-size: 24px;\r\n    color: #000;\r\n    font-family: 'Gilroy-Bold', sans-serif;\r\n    margin-bottom: 0;\r\n  }\r\n  .line{\r\n    height: 1px;\r\n    background-color: #E5E5E5;\r\n    margin-top: 5px;\r\n    ${({w}) => w && `width: calc(100% - ${w}px - 10px);`}\r\n  }\r\n  \r\n  ${({sm}) => sm && css`\r\n    h2 {\r\n      font-size: 18px;\r\n    }\r\n  `}\r\n`;\r\nconst Title = ({\r\n                   children,\r\n                   ...rest\r\n               }) => {\r\n    const [width,setWidth] = useState(0);\r\n    useEffect(()=>{\r\n        setWidth(ref.current.clientWidth)\r\n    },[])\r\n    const ref = useRef(null)\r\n    return (\r\n        <Styled {...rest} w={width}>\r\n            <h2 ref={ref}>{children}</h2>\r\n            <div className=\"line\"></div>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default Title;","import React, {useEffect, useMemo, useState} from 'react';\r\nimport {useSettingsStore, useStore} from \"../../../../store\";\r\nimport {find, get, head, isEmpty, isEqual, isNil, round, upperCase} from \"lodash\";\r\nimport Panel from \"../../../../components/panel\";\r\nimport Search from \"../../../../components/search\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport Section from \"../../../../components/section\";\r\nimport Title from \"../../../../components/ui/title\";\r\nimport Button from \"../../../../components/ui/button\";\r\nimport Form from \"../../../../containers/form/form\";\r\nimport Flex from \"../../../../components/flex\";\r\nimport Field from \"../../../../containers/form/field\";\r\nimport {useGetAllQuery, usePostQuery, usePutQuery} from \"../../../../hooks/api\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport {getSelectOptionsListFromData} from \"../../../../utils\";\r\nimport {OverlayLoader} from \"../../../../components/loader\";\r\nimport qrcodeImg from \"../../../../assets/images/qrcode.png\"\r\nimport dayjs from \"dayjs\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst getEndDateByInsuranceTerm = (term, startDate) => {\r\n    if (!isNil(term)) {\r\n        if (get(term, 'prefix') == 'day') {\r\n            return dayjs(startDate).add(get(term, 'value') - 1, get(term, 'prefix')).toDate()\r\n        }\r\n        if (get(term, 'prefix') == 'month') {\r\n            return dayjs(startDate).add(get(term, 'value'), get(term, 'prefix')).subtract(1, 'day').toDate()\r\n        }\r\n        if (get(term, 'prefix') == 'year') {\r\n            return dayjs(startDate).add(get(term, 'value'), get(term, 'prefix')).subtract(1, 'day').toDate()\r\n        }\r\n\r\n    }\r\n    return dayjs()\r\n}\r\n\r\nconst UpdateContainer = ({form_id}) => {\r\n    const [person, setPerson] = useState(null)\r\n    const [agentId, setAgentId] = useState(null)\r\n    const [organization, setOrganization] = useState(null)\r\n    const [insurant, setInsurant] = useState('person')\r\n    const [passportSeries, setPassportSeries] = useState(null)\r\n    const [passportNumber, setPassportNumber] = useState(null)\r\n    const [birthDate, setBirthDate] = useState(null)\r\n    const [inn, setInn] = useState(null)\r\n    const [regionId, setRegionId] = useState(null)\r\n    const [agencyId, setAgencyId] = useState(null)\r\n    const [insuranceTerm, setInsuranceTerm] = useState(null)\r\n    const [policeStartDate, setPoliceStartDate] = useState(dayjs())\r\n    const [oked, setOked] = useState(null)\r\n    const [fotSum, setFotSum] = useState(0)\r\n    const [risk, setRisk] = useState(null)\r\n    const [insurancePremium, setInsurancePremium] = useState(0)\r\n    const [rpmPercent, setRpmPercent] = useState(5)\r\n    const [rewardPercent, setRewardPercent] = useState(25)\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const {t} = useTranslation()\r\n    const navigate = useNavigate();\r\n    const breadcrumbs = useMemo(() => [{\r\n        id: 1, title: 'OSGOR', path: '/osgor/list',\r\n    }, {\r\n        id: 2, title: 'Добавить OSGOR', path: '/osgor/create',\r\n    }], [])\r\n\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n    const {data, isLoading} = useGetAllQuery({\r\n        key: KEYS.osgorView,\r\n        url: URLS.osgorView,\r\n        params: {\r\n            params: {\r\n                osgor_formId: form_id\r\n            }\r\n        },\r\n        enabled: !!(form_id)\r\n    })\r\n\r\n    const {data: filials, isLoading: isLoadingFilials} = useGetAllQuery({key: KEYS.agencies, url: URLS.agencies})\r\n    const filialList = getSelectOptionsListFromData(get(filials, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: insuranceTerms, isLoading: isLoadingInsuranceTerms} = useGetAllQuery({\r\n        key: KEYS.insuranceTerms, url: URLS.insuranceTerms\r\n    })\r\n    const insuranceTermsList = getSelectOptionsListFromData(get(insuranceTerms, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: country, isLoading: isLoadingCountry} = useGetAllQuery({\r\n        key: KEYS.countries, url: URLS.countries\r\n    })\r\n    const countryList = getSelectOptionsListFromData(get(country, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: region, isLoading: isLoadingRegion} = useGetAllQuery({\r\n        key: KEYS.regions, url: URLS.regions\r\n    })\r\n    const regionList = getSelectOptionsListFromData(get(region, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: genders} = useGetAllQuery({\r\n        key: KEYS.genders, url: URLS.genders\r\n    })\r\n    const genderList = getSelectOptionsListFromData(get(genders, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: residentTypes} = useGetAllQuery({\r\n        key: KEYS.residentTypes, url: URLS.residentTypes\r\n    })\r\n    const residentTypeList = getSelectOptionsListFromData(get(residentTypes, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: okeds} = useGetAllQuery({\r\n        key: KEYS.okeds, url: URLS.okeds\r\n    })\r\n    const okedList = getSelectOptionsListFromData(get(okeds, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: ownershipForms} = useGetAllQuery({\r\n        key: KEYS.ownershipForms, url: URLS.ownershipForms\r\n    })\r\n    const ownershipFormList = getSelectOptionsListFromData(get(ownershipForms, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: areaTypes} = useGetAllQuery({\r\n        key: KEYS.areaTypes, url: URLS.areaTypes\r\n    })\r\n    const areaTypesList = getSelectOptionsListFromData(get(areaTypes, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: district} = useGetAllQuery({\r\n        key: [KEYS.districts, regionId],\r\n        url: URLS.districts,\r\n        params: {\r\n            params: {\r\n                region: regionId\r\n            }\r\n        },\r\n        enabled: !!(regionId || get(person, 'regionId'))\r\n    })\r\n    const districtList = getSelectOptionsListFromData(get(district, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: activity} = useGetAllQuery({\r\n        key: [KEYS.activityAndRisk, oked],\r\n        url: URLS.activityAndRisk,\r\n        params: {\r\n            params: {\r\n                oked\r\n            }\r\n        },\r\n        enabled: !!(oked)\r\n    })\r\n\r\n    const {data: agents} = useGetAllQuery({\r\n        key: [KEYS.agents, agencyId],\r\n        url: URLS.agents,\r\n        params: {\r\n            params: {\r\n                branch: agencyId\r\n            }\r\n        },\r\n        enabled: !!(agencyId)\r\n    })\r\n    const agentsList = getSelectOptionsListFromData(get(agents, `data.result`, []), 'id', 'name')\r\n    const activityList = getSelectOptionsListFromData([{\r\n        oked: get(activity, `data.result.oked`),\r\n        name: get(activity, `data.result.name`)\r\n    }], 'oked', 'name')\r\n\r\n    const {\r\n        mutate: getPersonalInfoRequest, isLoading: isLoadingPersonalInfo\r\n    } = usePostQuery({listKeyId: KEYS.personalInfoProvider})\r\n\r\n    const {\r\n        mutate: getOrganizationInfoRequest, isLoading: isLoadingOrganizationInfo\r\n    } = usePostQuery({listKeyId: KEYS.organizationInfoProvider})\r\n\r\n    const {\r\n        mutate: calculatePremiumRequest\r\n    } = usePostQuery({listKeyId: KEYS.osgorCalculate,hideSuccessToast:true})\r\n    const {\r\n        mutate: updateRequest,isLoading:isLoadingPatch\r\n    } = usePutQuery({listKeyId: KEYS.osgorEdit})\r\n\r\n    const getInfo = () => {\r\n        getPersonalInfoRequest({\r\n                url: URLS.personalInfoProvider, attributes: {\r\n                    birthDate: dayjs(birthDate).format('YYYY-MM-DD'), passportSeries, passportNumber\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setPerson(get(data, 'result'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const getOrgInfo = () => {\r\n        getOrganizationInfoRequest({\r\n                url: URLS.organizationInfoProvider, attributes: {\r\n                    inn\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setOrganization(get(data, 'result'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const calculatePremium = () => {\r\n        calculatePremiumRequest({\r\n                url: URLS.osgorCalculate, attributes: {\r\n                    risk,\r\n                    insuranceSum: fotSum,\r\n                    insuranceTermId:insuranceTerm\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setInsurancePremium(get(data, 'result.insurancePremium'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const getFieldData = (name, value) => {\r\n        if (isEqual(name, 'insurant.person.regionId')) {\r\n            setRegionId(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].insuranceTermId')) {\r\n            setInsuranceTerm(value)\r\n        }\r\n        if (isEqual(name, 'insurant.organization.oked') || isEqual(name, 'insurant.person.oked')) {\r\n            setOked(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].risk')) {\r\n            setRisk(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].rpm')) {\r\n            setRpmPercent(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].agentReward')) {\r\n            setRewardPercent(value)\r\n        }\r\n        if (isEqual(name, 'agencyId')) {\r\n            setAgencyId(value)\r\n        }\r\n        if (isEqual(name, 'agentId')) {\r\n            setAgentId(value)\r\n        }\r\n    }\r\n    const update = ({data}) => {\r\n        const {\r\n            activityRisk,\r\n            birthDate,\r\n            fot,\r\n            funeralExpensesSum,\r\n            passportNumber,\r\n            passportSeries,\r\n            rewardPercent,\r\n            rewardSum,\r\n            risk,\r\n            rpmPercent,\r\n            rpmSum,\r\n            policies,\r\n            agentId,\r\n            insurant: insurantType,\r\n            ...rest\r\n        } = data\r\n        updateRequest({\r\n                url: URLS.osgorEdit, attributes: {\r\n                    agentId:String(agentId),\r\n                    regionId: isEqual(insurant, 'person') ? get(insurantType, 'person.regionId') : get(insurantType, 'organization.regionId'),\r\n                    sum: get(head(policies), 'insuranceSum', 0),\r\n                    contractStartDate: get(head(policies), 'startDate'),\r\n                    contractEndDate: get(head(policies), 'endDate'),\r\n                    insurant: isEqual(insurant, 'person') ? {\r\n                        person: {\r\n                            passportData: get(insurantType, 'person.passportData'),\r\n                            fullName: get(insurantType, 'person.fullName'),\r\n                            regionId: get(insurantType, 'person.regionId'),\r\n                            gender: get(insurantType, 'person.gender'),\r\n                            birthDate: get(insurantType, 'person.birthDate'),\r\n                            address: get(insurantType, 'person.address'),\r\n                            residentType: get(insurantType, 'person.residentType'),\r\n                            countryId: get(insurantType, 'person.countryId'),\r\n                            phone: get(insurantType, 'person.phone'),\r\n                            email: isEmpty(get(insurantType, 'person.email')) ? undefined :get(insurantType, 'person.email'),\r\n                            oked: String(get(insurantType, 'person.oked')),\r\n                        }\r\n                    } : {\r\n                        organization: {\r\n                            ...get(insurantType, 'organization'),\r\n                            oked: String(get(insurantType, 'organization.oked')),\r\n                            email: isEmpty(get(insurantType, 'organization.email')) ? undefined :get(insurantType, 'organization.email'),\r\n                        }\r\n                    },\r\n                    policies: [\r\n                        {\r\n                            ...head(policies),\r\n                            insuranceRate: get(data, 'comission', 0),\r\n                            fot: fotSum,\r\n                            funeralExpensesSum: parseInt(funeralExpensesSum),\r\n                            agentReward:parseInt(get(head(policies), 'agentReward',0)),\r\n                            risk:parseInt(get(head(policies), 'risk',0))\r\n                        }\r\n                    ],\r\n                    ...rest,\r\n                    osgor_formId: parseInt(form_id)\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data: response}) => {\r\n                    if (get(response, 'result.osgor_formId')) {\r\n                        navigate(`/osgor/view/${get(response, 'result.osgor_formId')}`);\r\n                    } else {\r\n                        navigate(`/osgor`);\r\n                    }\r\n                },\r\n            }\r\n        )\r\n    }\r\n    useEffect(() => {\r\n        if (risk && fotSum && insuranceTerm) {\r\n            calculatePremium()\r\n        }\r\n    }, [risk, fotSum,insuranceTerm])\r\n    useEffect(() => {\r\n        if (get(data, 'data.result.insurant.organization.oked')) {\r\n            setOked(get(data, 'data.result.insurant.organization.oked'))\r\n        }\r\n        if (get(data, 'data.result.insurant.person.oked')) {\r\n            setOked(get(data, 'data.result.insurant.person.oked'))\r\n        }\r\n        if (get(data, 'data.result.policies[0].fot')) {\r\n            setFotSum(get(data, 'data.result.policies[0].fot'))\r\n        }\r\n        if (get(data, 'data.result.policies[0].insurancePremium')) {\r\n            setInsurancePremium(get(data, 'data.result.policies[0].insurancePremium'))\r\n        }\r\n        if (get(data, 'data.result.insurant.organization')) {\r\n            setInsurant('organization')\r\n            setOrganization(get(data, 'data.result.insurant.organization'))\r\n        }\r\n        if (get(data, 'data.result.insurant.person')) {\r\n            setInsurant('person')\r\n            setOrganization(get(data, 'data.result.insurant.person'))\r\n        }\r\n        if (get(data, 'data.result.agencyId')) {\r\n            setAgencyId(get(data, 'data.result.agencyId'))\r\n        }\r\n        if (get(data, 'data.result.insurant.organization.inn')) {\r\n            setInn(get(data, 'data.result.insurant.organization.inn'))\r\n        }\r\n        if (!isNil(get(data, 'data.result.policies[0].agentReward'))) {\r\n            setRewardPercent(get(data, 'data.result.policies[0].agentReward'))\r\n        }\r\n\r\n    }, [get(data, 'data.result')])\r\n\r\n\r\n    if (isLoadingFilials || isLoadingInsuranceTerms || isLoadingCountry || isLoadingRegion || isLoading) {\r\n        return <OverlayLoader/>\r\n    }\r\n\r\n    return (<>\r\n        {(isLoadingPersonalInfo || isLoadingOrganizationInfo,isLoadingPatch) && <OverlayLoader/>}\r\n        <Panel>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Search/>\r\n                </Col>\r\n            </Row>\r\n        </Panel>\r\n        <Section>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Title>Параметры полиса</Title>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Form formRequest={update} getValueFromField={(value, name) => getFieldData(name, value)}\r\n                          footer={<Flex className={'mt-32'}><Button onClick={() => navigate('/osgor')} type={'button'}\r\n                                                                    gray className={'mr-16'}>Назад</Button><Button\r\n                              type={'submit'}\r\n                              className={'mr-16'}>Сохранить</Button></Flex>}>\r\n                        <Row gutterWidth={60} className={'mt-32'}>\r\n                            <Col xs={4} style={{borderRight: '1px solid #DFDFDF'}}>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Статус</Col>\r\n                                    <Col xs={7}><Button green>{get(data, 'data.result.status')}</Button></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Филиал </Col>\r\n                                    <Col xs={7}><Field disabled defaultValue={get(data, 'data.result.agencyId')}\r\n                                                       params={{required: true}} options={filialList}\r\n                                                       property={{hideLabel: true}} type={'select'}\r\n                                                       name={'agencyId'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Серия договора:</Col>\r\n                                    <Col xs={7}><Field defaultValue={get(data, 'data.result.seria')}\r\n                                                       property={{hideLabel: true}} type={'input'}\r\n                                                       name={'seria'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Номер договора: </Col>\r\n                                    <Col xs={7}><Field defaultValue={get(data, 'data.result.number')}\r\n                                                       params={{required: true}} property={{hideLabel: true}}\r\n                                                       type={'input'}\r\n                                                       name={'number'}/></Col>\r\n                                </Row>\r\n\r\n\r\n                                {/*<Row align={'center'} className={'mb-25'}>*/}\r\n                                {/*    <Col xs={6} className={'text-center'}>*/}\r\n                                {/*        <img src={qrcodeImg} alt=\"\"/>*/}\r\n                                {/*    </Col>*/}\r\n                                {/*    <Col xs={6}>*/}\r\n                                {/*        <Button type={'button'}>Проверить полис</Button>*/}\r\n                                {/*    </Col>*/}\r\n                                {/*</Row>*/}\r\n                            </Col>\r\n                            <Col xs={4}>\r\n\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Страховая сумма: </Col>\r\n                                    <Col xs={7}><Field defaultValue={fotSum}\r\n                                                       property={{hideLabel: true, disabled: true}}\r\n                                                       type={'number-format-input'}\r\n                                                       name={'policies[0].insuranceSum'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Страховая премия: </Col>\r\n                                    <Col xs={7}><Field defaultValue={insurancePremium}\r\n                                                       property={{hideLabel: true, disabled: true}}\r\n                                                       type={'number-format-input'}\r\n                                                       name={'policies[0].insurancePremium'}/></Col>\r\n                                </Row>\r\n\r\n\r\n                            </Col>\r\n                            <Col xs={4}>\r\n\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Срок страхования:</Col>\r\n                                    <Col xs={7}><Field\r\n                                        defaultValue={get(data, 'data.result.policies[0].insuranceTermId')}\r\n                                        options={insuranceTermsList} params={{required: true}}\r\n                                        label={'Insurance term'} property={{hideLabel: true}}\r\n                                        type={'select'}\r\n                                        name={'policies[0].insuranceTermId'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Дата начала покрытия: </Col>\r\n                                    <Col xs={7}><Field\r\n                                        property={{\r\n                                            hideLabel: true,\r\n                                            onChange: (val) => setPoliceStartDate(val),\r\n                                            dateFormat: 'dd.MM.yyyy'\r\n                                        }}\r\n                                        type={'datepicker'}\r\n                                        name={'policies[0].startDate'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Дача окончания покрытия: </Col>\r\n                                    <Col xs={7}><Field\r\n                                        defaultValue={getEndDateByInsuranceTerm(find(get(insuranceTerms, `data.result`, []), (_insuranceTerm) => get(_insuranceTerm, 'id') == insuranceTerm), policeStartDate)}\r\n                                        disabled={!isEqual(insuranceTerm, 6)}\r\n                                        property={{hideLabel: true, dateFormat: 'dd.MM.yyyy'}} type={'datepicker'}\r\n                                        name={'policies[0].endDate'}/></Col>\r\n                                </Row>\r\n                                <Row align={'center'} className={'mb-25'}>\r\n                                    <Col xs={5}>Дата выдачи полиса: </Col>\r\n                                    <Col xs={7}><Field property={{hideLabel: true, dateFormat: 'dd.MM.yyyy'}}\r\n                                                       type={'datepicker'}\r\n                                                       name={'policies[0].issueDate'}/></Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                        <Row gutterWidth={60} className={'mt-15'}>\r\n                            <Col xs={12} className={'mb-15'}><Title>Страхователь</Title></Col>\r\n                            <Col xs={12}>\r\n                                <Row>\r\n                                    <Col xs={4}>\r\n                                        <Flex>\r\n                                            <h4 className={'mr-16'}>Страхователь</h4>\r\n                                            <Button onClick={() => setInsurant('person')}\r\n                                                    gray={!isEqual(insurant, 'person')} className={'mr-16'}\r\n                                                    type={'button'}>Физ. лицо</Button>\r\n                                            <Button onClick={() => setInsurant('organization')}\r\n                                                    gray={!isEqual(insurant, 'organization')} type={'button'}>Юр.\r\n                                                лицо</Button>\r\n                                        </Flex>\r\n                                    </Col>\r\n                                    <Col xs={8} className={'text-right'}>\r\n                                        {isEqual(insurant, 'person') && <Flex justify={'flex-end'}>\r\n                                            <Field\r\n                                                defaultValue={get(data,'data.result.insurant.person.passportData.seria')}\r\n                                                className={'mr-16'} style={{width: 75}}\r\n                                                property={{\r\n                                                    hideLabel: true,\r\n                                                    mask: 'aa',\r\n                                                    placeholder: 'AA',\r\n                                                    upperCase: true,\r\n                                                    maskChar: '_',\r\n                                                    onChange: (val) => setPassportSeries(upperCase(val))\r\n                                                }}\r\n                                                name={'passportSeries'}\r\n                                                type={'input-mask'}\r\n                                            />\r\n                                            <Field\r\n                                                defaultValue={get(data,'data.result.insurant.person.passportData.number')}\r\n                                                property={{\r\n                                                hideLabel: true,\r\n                                                mask: '9999999',\r\n                                                placeholder: '1234567',\r\n                                                maskChar: '_',\r\n                                                onChange: (val) => setPassportNumber(val)\r\n                                            }} name={'passportNumber'} type={'input-mask'}/>\r\n\r\n                                            <Field\r\n                                                defaultValue={get(data,'data.result.insurant.person.birthDate')}\r\n                                                className={'ml-15'}\r\n                                                   property={{\r\n                                                       hideLabel: true,\r\n                                                       placeholder: 'Дата рождения',\r\n                                                       onChange: (e) => setBirthDate(e)\r\n                                                   }}\r\n                                                   name={'birthDate'} type={'datepicker'}/>\r\n                                            <Button onClick={getInfo} className={'ml-15'} type={'button'}>Получить\r\n                                                данные</Button>\r\n                                        </Flex>}\r\n                                        {isEqual(insurant, 'organization') && <Flex justify={'flex-end'}>\r\n                                            <Field defaultValue={get(data,'data.result.insurant.organization.inn')} property={{\r\n                                                hideLabel: true,\r\n                                                mask: '999999999',\r\n                                                placeholder: 'Inn',\r\n                                                maskChar: '_',\r\n                                                onChange: (val) => setInn(val)\r\n                                            }} name={'inn'} type={'input-mask'}/>\r\n                                            <Button onClick={getOrgInfo} className={'ml-15'} type={'button'}>Получить\r\n                                                данные</Button>\r\n                                        </Flex>}\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            <Col xs={12}>\r\n                                <hr className={'mt-15 mb-15'}/>\r\n                            </Col>\r\n                            {isEqual(insurant, 'person') && <>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'firstNameLatin',get(data,'data.result.insurant.person.fullName.firstname'))}\r\n                                           label={'Firstname'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.fullName.firstname'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'lastNameLatin',get(data,'data.result.insurant.person.fullName.lastname'))}\r\n                                           label={'Lastname'} type={'input'}\r\n                                           name={'insurant.person.fullName.lastname'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'middleNameLatin',get(data,'data.result.insurant.person.fullName.middlename'))}\r\n                                           label={'Middlename'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.fullName.middlename'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(person, 'pinfl',get(data,'data.result.insurant.person.passportData.pinfl'))} label={'ПИНФЛ'} type={'input'}\r\n                                           name={'insurant.person.passportData.pinfl'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} property={{\r\n                                        mask: 'aa',\r\n                                        placeholder: 'AA',\r\n                                        maskChar: '_'\r\n                                    }} defaultValue={passportSeries ?? get(data,'data.result.insurant.person.passportData.seria')} label={'Passport seria'} type={'input-mask'}\r\n                                           name={'insurant.person.passportData.seria'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} property={{\r\n                                        mask: '9999999',\r\n                                        placeholder: '1234567',\r\n                                        maskChar: '_'\r\n                                    }} defaultValue={passportNumber??get(data,'data.result.insurant.person.passportData.number')} label={'Passport number'} type={'input-mask'}\r\n                                           name={'insurant.person.passportData.number'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           defaultValue={dayjs(get(person, 'birthDate',get(data,'data.result.insurant.person.birthDate'))).toDate()}\r\n                                           label={'Birth date'}\r\n                                           type={'datepicker'}\r\n                                           name={'insurant.person.birthDate'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           defaultValue={get(person, 'gender',get(data,'data.result.insurant.person.gender'))}\r\n                                           options={genderList}\r\n                                           label={'Gender'}\r\n                                           type={'select'}\r\n                                           name={'insurant.person.gender'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        options={countryList}\r\n                                        defaultValue={get(person, 'birthCountry',get(data,'data.result.insurant.person.countryId'))}\r\n                                        label={'Country'}\r\n                                        type={'select'}\r\n                                        name={'insurant.person.countryId'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        options={regionList}\r\n                                        defaultValue={get(person, 'regionId',get(data,'data.result.insurant.person.regionId'))}\r\n                                        label={'Region'}\r\n                                        type={'select'}\r\n                                        name={'insurant.person.regionId'}/>\r\n                                </Col>\r\n                                {/*<Col xs={3} className={'mb-25'}>*/}\r\n                                {/*    <Field*/}\r\n                                {/*        options={districtList}*/}\r\n                                {/*        defaultValue={get(person, 'districtId',get(data,'data.result.insurant.person.districtId'))}*/}\r\n                                {/*        label={'District'}*/}\r\n                                {/*        type={'select'}*/}\r\n                                {/*        name={'insurant.person.districtId'}/>*/}\r\n                                {/*</Col>*/}\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{required: true}}\r\n                                        options={areaTypesList}\r\n                                        defaultValue={get(person, 'areaTypeId',get(data,'data.result.areaTypeId'))}\r\n                                        label={'Тип местности'}\r\n                                        type={'select'}\r\n                                        name={'areaTypeId'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           options={residentTypeList}\r\n                                           defaultValue={get(person, 'residentType',get(data,'data.result.insurant.person.residentType'))}\r\n                                           label={'Resident type'}\r\n                                           type={'select'}\r\n                                           name={'insurant.person.residentType'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           defaultValue={get(person, 'address',get(data,'data.result.insurant.person.address'))}\r\n                                           label={'Address'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.address'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{\r\n                                            required: true,\r\n                                            pattern: {\r\n                                                value: /^998(9[012345789]|6[125679]|7[01234569])[0-9]{7}$/,\r\n                                                message: 'Invalid format'\r\n                                            }\r\n                                        }}\r\n                                        defaultValue={get(person, 'phone',get(data,'data.result.insurant.person.phone'))}\r\n                                        label={'Phone'}\r\n                                        type={'input'}\r\n                                        property={{placeholder: '998XXXXXXXXX'}}\r\n                                        name={'insurant.person.phone'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        defaultValue={get(person, 'email',get(data,'data.result.insurant.person.email'))}\r\n                                        label={'Email'}\r\n                                        type={'input'}\r\n                                        name={'insurant.person.email'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        defaultValue={parseInt(get(data,'data.result.insurant.person.oked'))}\r\n                                        options={okedList}\r\n                                        params={{required: true}}\r\n                                        label={'Oked'}\r\n                                        type={'select'}\r\n                                        name={'insurant.person.oked'}/>\r\n                                </Col>\r\n                            </>}\r\n                            {isEqual(insurant, 'organization') && <>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} label={'INN'} defaultValue={inn ?? get(data,'data.result.insurant.organization.inn')} property={{\r\n                                        mask: '999999999',\r\n                                        placeholder: 'Inn',\r\n                                        maskChar: '_'\r\n                                    }} name={'insurant.organization.inn'} type={'input-mask'}/>\r\n\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(organization, 'name')}\r\n                                           label={'Наименование'} type={'input'}\r\n                                           name={'insurant.organization.name'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(data,'data.result.insurant.organization.representativeName')} label={'Руководитель'} type={'input'}\r\n                                           name={'insurant.organization.representativeName'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(data,'data.result.insurant.organization.position')} label={'Должность'} type={'input'}\r\n                                           name={'insurant.organization.position'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{required: true}}\r\n                                        options={areaTypesList}\r\n                                        defaultValue={get(data,'data.result.areaTypeId')}\r\n                                        label={'Тип местности'}\r\n                                        type={'select'}\r\n                                        name={'areaTypeId'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(organization, 'address')} params={{required: true}} label={'Address'} type={'input'}\r\n                                           name={'insurant.organization.address'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(organization, 'phone')} params={{\r\n                                        required: true,\r\n                                        pattern: {value:/^998(9[012345789]|6[125679]|7[01234569])[0-9]{7}$/,message: 'Invalid format'}\r\n                                    }}\r\n                                           label={'Телефон'} type={'input'}\r\n                                           name={'insurant.organization.phone'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(organization, 'email')} label={'Email'} type={'input'}\r\n                                           name={'insurant.organization.email'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           options={okedList}\r\n                                           defaultValue={parseInt(get(organization, 'oked'))}\r\n                                           label={'ОКЭД'}\r\n                                           type={'select'}\r\n                                           name={'insurant.organization.oked'}/>\r\n                                </Col>\r\n                                <Col xs={3} className={'mb-25'}>\r\n                                    <Field defaultValue={get(data,'data.result.insurant.organization.checkingAccount')} label={'Расчетный счет'} type={'input'}\r\n                                           name={'insurant.organization.checkingAccount'}/>\r\n                                </Col>\r\n                                <Col xs={3}><Field defaultValue={get(data,'data.result.insurant.organization.regionId')} label={'Область'} params={{required: true}} options={regionList}\r\n                                                   type={'select'}\r\n                                                   name={'insurant.organization.regionId'}/></Col>\r\n                                <Col xs={3}><Field defaultValue={get(data,'data.result.insurant.organization.ownershipFormId')} label={'Форма собственности'} params={{required: true}}\r\n                                                   options={ownershipFormList}\r\n                                                   type={'select'}\r\n                                                   name={'insurant.organization.ownershipFormId'}/></Col>\r\n                            </>}\r\n                        </Row>\r\n                        <Row gutterWidth={60} className={'mt-15'}>\r\n                            <Col xs={12} className={'mb-15'}><Title>Вид деятельности</Title></Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(head(activityList),'value')}\r\n                                    options={activityList}\r\n                                    label={'Вид деятельности (по правилам)'}\r\n                                    type={'select'}\r\n                                    name={'activityRisk'}/>\r\n                            </Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(data, 'data.result.policies[0].risk')}\r\n                                    options={getSelectOptionsListFromData(get(activity, 'data.result.risks', []), 'number', 'number')}\r\n                                    label={'Класс проф. риска'}\r\n                                    type={'select'}\r\n                                    name={'policies[0].risk'}/>\r\n                            </Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(find(get(activity, 'data.result.risks', []), _risk => get(_risk, 'number') == risk), 'coeficient') ?? get(data, 'data.result.policies[0].insuranceRate',0)}\r\n                                    property={{disabled: true}}\r\n                                    label={'Коэффициент страхового тарифа'}\r\n                                    type={'input'}\r\n                                    name={'comission'}/>\r\n                            </Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(data, 'data.result.policies[0].funeralExpensesSum',0)}\r\n                                    label={'Расходы на погребение'}\r\n                                    type={'number-format-input'}\r\n                                    name={'funeralExpensesSum'}/>\r\n                            </Col>\r\n                            <Col xs={3} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(data, 'data.result.policies[0].fot',0)}\r\n                                    property={{onChange: (val) => setFotSum(val)}}\r\n                                    label={'Фонд оплаты труда'}\r\n                                    type={'number-format-input'}\r\n                                    name={'fot'}/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutterWidth={60} className={'mt-15'}>\r\n                            <Col xs={12} className={'mb-15'}><Title>Агентсткое вознограждение и РПМ</Title></Col>\r\n                            <Col xs={8}>\r\n                                <Row>\r\n                                    <Col xs={12} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={get(data, 'data.result.agentId')}\r\n                                            options={[{label:t('No agent'),value:undefined},...agentsList]}\r\n                                            label={'Агент'}\r\n                                            type={'select'}\r\n                                            name={'agentId'}/>\r\n                                    </Col>\r\n\r\n                                    <Col xs={6} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={isEqual(agentId,undefined) ? 0 : get(data,'data.result.policies[0].agentReward',25)}\r\n                                            label={'Вознограждение %'}\r\n                                            property={{type:'number',disabled:isEqual(agentId,undefined)}}\r\n                                            type={'input'}\r\n                                            name={'policies[0].agentReward'}/>\r\n                                    </Col>\r\n                                    <Col xs={6} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={5}\r\n                                            property={{disabled:true}}\r\n                                            label={'Отчисления в РПМ  %'}\r\n                                            type={'input'}\r\n                                            name={'policies[0].rpm'}/>\r\n                                    </Col>\r\n                                    <Col xs={6} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={round(rewardPercent * insurancePremium / 100, 2)}\r\n                                            property={{disabled: true}}\r\n                                            label={'Сумма'}\r\n                                            type={'number-format-input'}\r\n                                            name={'rewardSum'}/>\r\n                                    </Col>\r\n                                    <Col xs={6} className={'mb-25'}>\r\n                                        <Field\r\n                                            defaultValue={round(rpmPercent * insurancePremium / 100, 2)}\r\n                                            property={{disabled: true}}\r\n                                            label={'Сумма'}\r\n                                            type={'number-format-input'}\r\n                                            name={'rpmSum'}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Section>\r\n    </>);\r\n};\r\n\r\nexport default UpdateContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport UpdateContainer from \"../../containers/osgor/UpdateContainer\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst Styled = styled.div`\r\n  .w-100 {\r\n    & > div {\r\n      width: 100%;\r\n    }\r\n  }\r\n  .form-group {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\nconst UpdatePage = ({...rest}) => {\r\n    const {form_id = null} = useParams();\r\n    return (\r\n        <Styled {...rest}>\r\n            <UpdateContainer form_id={form_id}/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default UpdatePage;","import {includes, isEqual,get,isObject} from \"lodash\";\r\n\r\nconst addDetectClick =  ({setOpen,classNames = []}) => {\r\n    window.addEventListener(\"click\", (e) => {\r\n        if (!classNames.some(className => e.target.classList.contains(className))) {\r\n            setOpen(false);\r\n        }\r\n    });\r\n}\r\nconst removeDetectClick = () => {\r\n    window.removeEventListener('click',addDetectClick,false);\r\n}\r\n\r\nconst hasAccess = (roles = [], can = '') => {\r\n    let access = false;\r\n    if (includes(roles, can)) {\r\n        access = true;\r\n    }\r\n    return access;\r\n}\r\n\r\nconst formatDate  = (date) => {\r\n\r\n    date = new Date(date);\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth()+1;\r\n    let year = date.getFullYear();\r\n\r\n    return monthIndex < 10 ? `${day}/0${monthIndex}/${year}` : `${day}/${monthIndex}/${year}`;\r\n}\r\n\r\n\r\n\r\n\r\nconst getSelectOptionsListFromData = (data = [], value = 'id', label = 'title') => {\r\n    return data.map(item => isObject(item) ?  ({ value: item[value], label: get(item,label) }) : ({ value: item, label: item})) || [];\r\n}\r\n\r\nconst getFieldType = (type = 'String') => {\r\n    if(isEqual(type,'Date')){\r\n        return 'datepicker';\r\n    }\r\n\r\n    if(isEqual(type,'Schema.Types.ObjectId')){\r\n        return 'select';\r\n    }\r\n\r\n\r\n    return 'input';\r\n}\r\n\r\nexport {\r\n    addDetectClick,\r\n    removeDetectClick,\r\n    hasAccess,\r\n    getSelectOptionsListFromData,\r\n    formatDate,\r\n    getFieldType\r\n}"],"names":["Styled","styled","children","rest","fluid","useForm","register","handleSubmit","t","useTranslation","onSubmit","data","console","log","placeholder","type","className","w","sm","css","useState","width","setWidth","useEffect","ref","current","clientWidth","useRef","getEndDateByInsuranceTerm","term","startDate","isNil","get","dayjs","add","toDate","subtract","form_id","person","setPerson","agentId","setAgentId","organization","setOrganization","insurant","setInsurant","passportSeries","setPassportSeries","passportNumber","setPassportNumber","birthDate","setBirthDate","inn","setInn","regionId","setRegionId","agencyId","setAgencyId","insuranceTerm","setInsuranceTerm","policeStartDate","setPoliceStartDate","oked","setOked","fotSum","setFotSum","risk","setRisk","insurancePremium","setInsurancePremium","rpmPercent","setRpmPercent","rewardPercent","setRewardPercent","setBreadcrumbs","useStore","state","navigate","useNavigate","breadcrumbs","useMemo","id","title","path","useGetAllQuery","key","KEYS","url","URLS","params","osgor_formId","enabled","isLoading","filials","isLoadingFilials","filialList","getSelectOptionsListFromData","insuranceTerms","isLoadingInsuranceTerms","insuranceTermsList","country","isLoadingCountry","countryList","region","isLoadingRegion","regionList","genders","genderList","residentTypes","residentTypeList","okeds","okedList","ownershipForms","ownershipFormList","areaTypes","areaTypesList","district","activity","agents","branch","agentsList","activityList","name","usePostQuery","listKeyId","getPersonalInfoRequest","mutate","getOrganizationInfoRequest","calculatePremiumRequest","hideSuccessToast","usePutQuery","updateRequest","isLoadingPatch","attributes","insuranceSum","insuranceTermId","onSuccess","xs","formRequest","funeralExpensesSum","activityRisk","fot","policies","rewardSum","rpmSum","insurantType","String","isEqual","sum","head","contractStartDate","contractEndDate","passportData","fullName","gender","address","residentType","countryId","phone","email","isEmpty","undefined","insuranceRate","parseInt","agentReward","response","getValueFromField","value","getFieldData","footer","onClick","gray","gutterWidth","style","borderRight","align","green","disabled","defaultValue","required","options","property","hideLabel","label","onChange","val","dateFormat","find","_insuranceTerm","justify","mask","upperCase","maskChar","e","format","pattern","message","_risk","round","useParams","map","item","isObject"],"sourceRoot":""}