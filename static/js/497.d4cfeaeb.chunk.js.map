{"version":3,"file":"static/js/497.d4cfeaeb.chunk.js","mappings":"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","sources":["modules/agreement/containers/osgor/CreateContainer.jsx","modules/agreement/pages/osgor/CreatePage.jsx"],"sourcesContent":["import React, {useEffect, useMemo, useState} from 'react';\r\nimport {useStore} from \"../../../../store\";\r\nimport {find, get, head, isEmpty, isEqual, isNil, round, upperCase} from \"lodash\";\r\nimport Panel from \"../../../../components/panel\";\r\nimport Search from \"../../../../components/search\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport Section from \"../../../../components/section\";\r\nimport Title from \"../../../../components/ui/title\";\r\nimport Button from \"../../../../components/ui/button\";\r\nimport Form from \"../../../../containers/form/form\";\r\nimport Flex from \"../../../../components/flex\";\r\nimport Field from \"../../../../containers/form/field\";\r\nimport {useGetAllQuery, usePostQuery} from \"../../../../hooks/api\";\r\nimport {KEYS} from \"../../../../constants/key\";\r\nimport {URLS} from \"../../../../constants/url\";\r\nimport {getSelectOptionsListFromData} from \"../../../../utils\";\r\nimport {OverlayLoader} from \"../../../../components/loader\";\r\nimport dayjs from \"dayjs\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst getEndDateByInsuranceTerm = (term, startDate) => {\r\n    if (!isNil(term)) {\r\n        if (get(term, 'prefix') == 'day') {\r\n            return dayjs(startDate).add(get(term, 'value') - 1, get(term, 'prefix')).toDate()\r\n        }\r\n        if (get(term, 'prefix') == 'month') {\r\n            return dayjs(startDate).add(get(term, 'value'), get(term, 'prefix')).subtract(1, 'day').toDate()\r\n        }\r\n        if (get(term, 'prefix') == 'year') {\r\n            return dayjs(startDate).add(get(term, 'value'), get(term, 'prefix')).subtract(1, 'day').toDate()\r\n        }\r\n\r\n    }\r\n    return dayjs()\r\n}\r\n\r\nconst CreateContainer = ({...rest}) => {\r\n    const [person, setPerson] = useState(null)\r\n    const [organization, setOrganization] = useState(null)\r\n    const [insurant, setInsurant] = useState('organization')\r\n    const [passportSeries, setPassportSeries] = useState(null)\r\n    const [passportNumber, setPassportNumber] = useState(null)\r\n    const [birthDate, setBirthDate] = useState(null)\r\n    const [inn, setInn] = useState(null)\r\n    const [regionId, setRegionId] = useState(null)\r\n    const [insuranceTerm, setInsuranceTerm] = useState(null)\r\n    const [oked, setOked] = useState(null)\r\n    const [fotSum, setFotSum] = useState(0)\r\n    const [risk, setRisk] = useState(null)\r\n    const [policeStartDate, setPoliceStartDate] = useState(dayjs())\r\n    const [insurancePremium, setInsurancePremium] = useState(0)\r\n    const [rpmPercent, setRpmPercent] = useState(5)\r\n    const [rewardPercent, setRewardPercent] = useState(0)\r\n    const setBreadcrumbs = useStore(state => get(state, 'setBreadcrumbs', () => {\r\n    }))\r\n    const navigate = useNavigate();\r\n    const breadcrumbs = useMemo(() => [{\r\n        id: 1, title: 'OSGOR', path: '/osgor',\r\n    }, {\r\n        id: 2, title: 'Добавить OSGOR', path: '/osgor/create',\r\n    }], [])\r\n\r\n    const {t} = useTranslation()\r\n\r\n\r\n    useEffect(() => {\r\n        setBreadcrumbs(breadcrumbs)\r\n    }, [])\r\n\r\n\r\n    const {data: insuranceTerms, isLoading: isLoadingInsuranceTerms} = useGetAllQuery({\r\n        key: KEYS.insuranceTerms, url: URLS.insuranceTerms\r\n    })\r\n    const insuranceTermsList = getSelectOptionsListFromData(get(insuranceTerms, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: region, isLoading: isLoadingRegion} = useGetAllQuery({\r\n        key: KEYS.regions, url: URLS.regions\r\n    })\r\n    const regionList = getSelectOptionsListFromData(get(region, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: genders} = useGetAllQuery({\r\n        key: KEYS.genders, url: URLS.genders\r\n    })\r\n    const genderList = getSelectOptionsListFromData(get(genders, `data.result`, []), 'id', 'name')\r\n\r\n\r\n    const {data: okeds} = useGetAllQuery({\r\n        key: KEYS.okeds, url: URLS.okeds\r\n    })\r\n    const okedList = getSelectOptionsListFromData(get(okeds, `data.result`, []), 'id', 'name')\r\n\r\n    const {data: ownershipForms} = useGetAllQuery({\r\n        key: KEYS.ownershipForms, url: URLS.ownershipForms\r\n    })\r\n    const ownershipFormList = getSelectOptionsListFromData(get(ownershipForms, `data.result`, []), 'id', 'name')\r\n\r\n\r\n    const {data: district} = useGetAllQuery({\r\n        key: [KEYS.districts, regionId],\r\n        url: URLS.districts,\r\n        params: {\r\n            params: {\r\n                region: regionId\r\n            }\r\n        },\r\n        enabled: !!(regionId || get(person, 'regionId'))\r\n    })\r\n    const districtList = getSelectOptionsListFromData(get(district, `data.result`, []), 'id', 'name')\r\n\r\n\r\n    const {data: activity} = useGetAllQuery({\r\n        key: [KEYS.activityAndRisk, oked],\r\n        url: URLS.activityAndRisk,\r\n        params: {\r\n            params: {\r\n                oked\r\n            }\r\n        },\r\n        enabled: !!(oked)\r\n    })\r\n\r\n\r\n    const {\r\n        mutate: getPersonalInfoRequest, isLoading: isLoadingPersonalInfo\r\n    } = usePostQuery({listKeyId: KEYS.personalInfoProvider})\r\n\r\n    const {\r\n        mutate: getOrganizationInfoRequest, isLoading: isLoadingOrganizationInfo\r\n    } = usePostQuery({listKeyId: KEYS.organizationInfoProvider})\r\n\r\n    const {\r\n        mutate: calculatePremiumRequest\r\n    } = usePostQuery({listKeyId: KEYS.osgorCalculate, hideSuccessToast: true})\r\n    const {\r\n        mutate: createRequest\r\n    } = usePostQuery({listKeyId: KEYS.osgorCreate})\r\n\r\n    const getInfo = () => {\r\n        getPersonalInfoRequest({\r\n                url: URLS.personalInfoProvider, attributes: {\r\n                    birthDate: dayjs(birthDate).format('YYYY-MM-DD'), passportSeries, passportNumber\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setPerson(get(data, 'result'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const getOrgInfo = () => {\r\n        getOrganizationInfoRequest({\r\n                url: URLS.organizationInfoProvider, attributes: {\r\n                    inn\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setOrganization(get(data, 'result'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const calculatePremium = () => {\r\n        calculatePremiumRequest({\r\n                url: URLS.osgorCalculate, attributes: {\r\n                    risk,\r\n                    fot: fotSum,\r\n                    insuranceTermId: insuranceTerm\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data}) => {\r\n                    setInsurancePremium(get(data, 'result'))\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const getFieldData = (name, value) => {\r\n        if (isEqual(name, 'insurant.organization.regionId') || isEqual(name, 'insurant.person.regionId')) {\r\n            setRegionId(value)\r\n        }\r\n        if (isEqual(name, 'insurant.organization.oked')) {\r\n            setOked(value)\r\n        }\r\n        if (isEqual(name, 'policies[0].risk')) {\r\n            setRisk(value)\r\n        }\r\n        if (isEqual(name, 'insurant.person.oked')) {\r\n            setOked(value)\r\n        }\r\n\r\n        if (isEqual(name, 'policies[0].insuranceTermId')) {\r\n            setInsuranceTerm(value)\r\n        }\r\n    }\r\n    const create = ({data}) => {\r\n        const {\r\n            activityRisk,\r\n            birthDate,\r\n            fot,\r\n            funeralExpensesSum,\r\n            passportNumber,\r\n            passportSeries,\r\n            rewardPercent,\r\n            rewardSum,\r\n            risk,\r\n            rpmPercent,\r\n            rpmSum,\r\n            policies,\r\n            agentId,\r\n            insurant: insurantType,\r\n            ...rest\r\n        } = data\r\n        createRequest({\r\n                url: URLS.osgorCreate, attributes: {\r\n                    insurant: isEqual(insurant, 'person') ? {\r\n                        person: {\r\n                            passportData: get(insurantType, 'person.passportData'),\r\n                            fullName: get(insurantType, 'person.fullName'),\r\n                            regionId: get(insurantType, 'person.regionId'),\r\n                            districtId: get(insurantType, 'person.districtId'),\r\n                            gender: get(insurantType, 'person.gender'),\r\n                            birthDate: get(insurantType, 'person.birthDate'),\r\n                            address: get(insurantType, 'person.address'),\r\n                            residentType: get(insurantType, 'person.residentType'),\r\n                            phone: get(insurantType, 'person.phone'),\r\n                            // oked: String(get(insurantType, 'person.oked')),\r\n                        }\r\n                    } : {\r\n                        organization: {\r\n                            ...get(insurantType, 'organization'),\r\n                            oked: String(get(insurantType, 'organization.oked')),\r\n                        }\r\n                    },\r\n                    ...rest\r\n                }\r\n            },\r\n            {\r\n                onSuccess: ({data: response}) => {\r\n                    if (get(response, 'result.osgor_formId')) {\r\n                        navigate(`/osgor/view/${get(response, 'result.osgor_formId')}`);\r\n                    } else {\r\n                        navigate(`/osgor/list`);\r\n                    }\r\n                },\r\n            }\r\n        )\r\n    }\r\n    useEffect(() => {\r\n        if (risk && fotSum && insuranceTerm) {\r\n            calculatePremium()\r\n        }\r\n    }, [risk, fotSum, insuranceTerm])\r\n\r\n    if (isLoadingRegion) {\r\n        return <OverlayLoader/>\r\n    }\r\n\r\n\r\n    return (<>\r\n        {(isLoadingPersonalInfo || isLoadingOrganizationInfo) && <OverlayLoader/>}\r\n        <Panel>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Search/>\r\n                </Col>\r\n            </Row>\r\n        </Panel>\r\n        <Section>\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Form formRequest={create} getValueFromField={(value, name) => getFieldData(name, value)}\r\n                          footer={<Flex className={'mt-32'}><Button onClick={() => navigate('/osgor')} danger\r\n                                                                    type={'button'}\r\n                                                                    className={'mr-16'}>Отмена</Button><Button\r\n                              type={'submit'}\r\n                              className={'mr-16'}>Оставить заявку</Button></Flex>}>\r\n                        <Row gutterWidth={60} className={'mt-15'}>\r\n                            <Col xs={12} className={'mb-25'}><Title>Информация о страхователе:\r\n                            </Title></Col>\r\n                            <Col xs={12}>\r\n                                <Row>\r\n                                    <Col xs={4}>\r\n                                        <Flex>\r\n                                            <h4 className={'mr-16'}>Страхователь</h4>\r\n                                            <Button onClick={() => setInsurant('person')}\r\n                                                    gray={!isEqual(insurant, 'person')} className={'mr-16'}\r\n                                                    type={'button'}>Физ. лицо</Button>\r\n                                            <Button onClick={() => setInsurant('organization')}\r\n                                                    gray={!isEqual(insurant, 'organization')} type={'button'}>Юр.\r\n                                                лицо</Button>\r\n                                        </Flex>\r\n                                    </Col>\r\n                                    <Col xs={8} className={'text-right'}>\r\n                                        {isEqual(insurant, 'person') && <Flex justify={'flex-end'}>\r\n                                            <Field params={{required: true}}\r\n                                                   className={'mr-16'} style={{width: 75}}\r\n                                                   property={{\r\n                                                       hideLabel: true,\r\n                                                       mask: 'aa',\r\n                                                       placeholder: 'AA',\r\n                                                       upperCase: true,\r\n                                                       maskChar: '_',\r\n                                                       onChange: (val) => setPassportSeries(upperCase(val))\r\n                                                   }}\r\n                                                   name={'insurant.person.passportData.seria'}\r\n                                                   type={'input-mask'}\r\n                                            />\r\n                                            <Field params={{required: true}} property={{\r\n                                                hideLabel: true,\r\n                                                mask: '9999999',\r\n                                                placeholder: '1234567',\r\n                                                maskChar: '_',\r\n                                                onChange: (val) => setPassportNumber(val)\r\n                                            }} name={'insurant.person.passportData.number'} type={'input-mask'}/>\r\n\r\n                                            <Field params={{required: true}} className={'ml-15'}\r\n                                                   property={{\r\n                                                       hideLabel: true,\r\n                                                       placeholder: 'Дата рождения',\r\n                                                       onChange: (e) => setBirthDate(e)\r\n                                                   }}\r\n                                                   name={'insurant.person.birthDate'} type={'datepicker'}/>\r\n                                            <Button onClick={getInfo} className={'ml-15'} type={'button'}>Получить\r\n                                                данные</Button>\r\n                                        </Flex>}\r\n                                        {isEqual(insurant, 'organization') && <Flex justify={'flex-end'}>\r\n                                            <Field params={{required: true}} property={{\r\n                                                hideLabel: true,\r\n                                                mask: '999999999',\r\n                                                placeholder: 'Inn',\r\n                                                maskChar: '_',\r\n                                                onChange: (val) => setInn(val)\r\n                                            }} name={'insurant.organization.inn'} type={'input-mask'}/>\r\n\r\n                                            <Button onClick={getOrgInfo} className={'ml-15'} type={'button'}>Получить\r\n                                                данные</Button>\r\n                                        </Flex>}\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                            <Col xs={12}>\r\n                                <hr className={'mt-15 mb-15'}/>\r\n                            </Col>\r\n                            {isEqual(insurant, 'person') && <>\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'firstNameLatin')}\r\n                                           label={'Firstname'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.fullName.firstname'}/>\r\n                                </Col>\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'lastNameLatin')}\r\n                                           label={'Lastname'} type={'input'}\r\n                                           name={'insurant.person.fullName.lastname'}/>\r\n                                </Col>\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(person, 'middleNameLatin')}\r\n                                           label={'Middlename'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.fullName.middlename'}/>\r\n                                </Col>\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field defaultValue={get(person, 'pinfl')} label={'ПИНФЛ'} type={'input'}\r\n                                           name={'insurant.person.passportData.pinfl'}/>\r\n                                </Col>\r\n\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           defaultValue={get(person, 'gender')}\r\n                                           options={genderList}\r\n                                           label={'Gender'}\r\n                                           type={'select'}\r\n                                           name={'insurant.person.gender'}/>\r\n                                </Col>\r\n\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{required: true}}\r\n                                        options={regionList}\r\n                                        defaultValue={get(person, 'regionId')}\r\n                                        label={'Region'}\r\n                                        type={'select'}\r\n                                        name={'insurant.person.regionId'}/>\r\n                                </Col>\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{required: true}}\r\n                                        options={districtList}\r\n                                        defaultValue={get(person, 'districtId')}\r\n                                        label={'District'}\r\n                                        type={'select'}\r\n                                        name={'insurant.person.districtId'}/>\r\n                                </Col>\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field params={{required: true}}\r\n                                           defaultValue={get(person, 'address')}\r\n                                           label={'Address'}\r\n                                           type={'input'}\r\n                                           name={'insurant.person.address'}/>\r\n                                </Col>\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field\r\n                                        params={{\r\n                                            required: true,\r\n                                            pattern: {\r\n                                                value: /^998(9[012345789]|6[125679]|7[01234569])[0-9]{7}$/,\r\n                                                message: 'Invalid format'\r\n                                            }\r\n                                        }}\r\n                                        defaultValue={get(person, 'phone')}\r\n                                        label={'Phone'}\r\n                                        type={'input'}\r\n                                        property={{placeholder: '998XXXXXXXXX'}}\r\n                                        name={'insurant.person.phone'}/>\r\n                                </Col>\r\n                            </>}\r\n                            {isEqual(insurant, 'organization') && <>\r\n                                <Col xs={4}><Field label={'Форма собственности'} params={{required: true}}\r\n                                                   options={ownershipFormList}\r\n                                                   type={'select'}\r\n                                                   name={'insurant.organization.ownershipFormId'}/></Col>\r\n                                <Col xs={8} className={'mb-25'}>\r\n                                    <Field params={{required: true}} defaultValue={get(organization, 'name')}\r\n                                           label={'Наименование'} type={'input'}\r\n                                           name={'insurant.organization.name'}/>\r\n                                </Col>\r\n\r\n\r\n                                <Col xs={4}><Field label={'Область'} params={{required: true}} options={regionList}\r\n                                                   type={'select'}\r\n                                                   name={'insurant.organization.regionId'}/></Col>\r\n                                <Col xs={4}><Field label={'Район'} params={{required: true}} options={districtList}\r\n                                                   type={'select'}\r\n                                                   name={'insurant.organization.districtId'}/></Col>\r\n\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field defaultValue={get(organization, 'address')} params={{required: true}}\r\n                                           label={'Address'} type={'input'}\r\n                                           name={'insurant.organization.address'}/>\r\n                                </Col>\r\n                                <Col xs={4} className={'mb-25'}>\r\n                                    <Field defaultValue={get(organization, 'phone')} params={{\r\n                                        required: true,\r\n                                        pattern: /^998(9[012345789]|6[125679]|7[01234569])[0-9]{7}$/\r\n                                    }}\r\n                                           label={'Телефон'} type={'input'}\r\n                                           name={'insurant.organization.phone'}/>\r\n                                </Col>\r\n\r\n                            </>}\r\n                        </Row>\r\n                        <Row gutterWidth={60} className={'mt-15'}>\r\n                            <Col xs={12} className={'mb-25'}><Title>Деятельность:</Title></Col>\r\n\r\n                            <Col xs={4} className={'mb-25'}>\r\n                                <Field params={{required: true}}\r\n                                       options={okedList}\r\n                                       defaultValue={parseInt(get(organization, 'oked'))}\r\n                                       label={'ОКЭД'}\r\n                                       type={'select'}\r\n                                       name={'insurant.organization.oked'}/>\r\n                            </Col>\r\n                            <Col xs={4} className={'mb-25'}>\r\n                                <Field\r\n                                    params={{required: true}}\r\n                                    options={getSelectOptionsListFromData(get(activity, 'data.result.risks', []), 'number', 'number')}\r\n                                    label={'Класс проф. риска'}\r\n                                    type={'select'}\r\n                                    name={'policies[0].risk'}/>\r\n                            </Col>\r\n                            <Col xs={4} className={'mb-25'}>\r\n                                <Field\r\n                                    property={{onChange: (val) => setFotSum(val)}}\r\n                                    label={'Фонд оплаты труда'}\r\n                                    type={'number-format-input'}\r\n                                    name={'policies[0].fot'}/>\r\n                            </Col>\r\n                            <Col xs={4} className={'mb-25'}>\r\n                                <Field options={insuranceTermsList} params={{required: true}}\r\n                                       label={'Срок страхования'}\r\n                                       type={'select'}\r\n                                       name={'policies[0].insuranceTermId'}/>\r\n                            </Col>\r\n                            <Col xs={4} className={'mb-25'}>\r\n                                <Field\r\n                                    label={'Дата начала полиса'}\r\n                                    params={{required: true}}\r\n                                    property={{\r\n                                        onChange: (val) => setPoliceStartDate(val),\r\n                                        dateFormat: 'dd.MM.yyyy'\r\n                                    }}\r\n                                    type={'datepicker'}\r\n                                    name={'policies[0].startDate'}/>\r\n                            </Col>\r\n                            <Col xs={4}>\r\n                                <Field\r\n                                    label={'Дата окончания полиса '}\r\n                                    params={{required: true}}\r\n                                    defaultValue={getEndDateByInsuranceTerm(find(get(insuranceTerms, `data.result`, []), (_insuranceTerm) => get(_insuranceTerm, 'id') == insuranceTerm), policeStartDate)}\r\n                                    disabled={!isEqual(insuranceTerm, 6)}\r\n                                    property={{dateFormat: 'dd.MM.yyyy'}} type={'datepicker'}\r\n                                    name={'policies[0].endDate'}/>\r\n                            </Col>\r\n                            <Col xs={6} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(insurancePremium,'insuranceSum')}\r\n                                    property={{disabled: true}}\r\n                                    label={'Общая страховая сумма:'}\r\n                                    type={'number-format-input'}\r\n                                    name={'policies[0].insuranceSum'}/>\r\n                            </Col>\r\n                            <Col xs={6} className={'mb-25'}>\r\n                                <Field\r\n                                    defaultValue={get(insurancePremium,'insurancePremium')}\r\n                                    property={{disabled: true}}\r\n                                    label={'Общая страховая премия:'}\r\n                                    type={'number-format-input'}\r\n                                    name={'policies[0].insurancePremium'}/>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Section>\r\n    </>);\r\n};\r\n\r\nexport default CreateContainer;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport CreateContainer from \"../../containers/osgor/CreateContainer\";\r\n\r\nconst Styled = styled.div`\r\n  .form-group {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n`;\r\nconst CreatePage = ({...rest}) => {\r\n    return (\r\n        <Styled {...rest}>\r\n            <CreateContainer/>\r\n        </Styled>\r\n    );\r\n};\r\n\r\nexport default CreatePage;"],"names":["getEndDateByInsuranceTerm","term","startDate","isNil","get","dayjs","add","toDate","subtract","_ref","rest","person","setPerson","useState","organization","setOrganization","insurant","setInsurant","passportSeries","setPassportSeries","passportNumber","setPassportNumber","birthDate","setBirthDate","inn","setInn","regionId","setRegionId","insuranceTerm","setInsuranceTerm","oked","setOked","fotSum","setFotSum","risk","setRisk","policeStartDate","setPoliceStartDate","insurancePremium","setInsurancePremium","rpmPercent","setRpmPercent","rewardPercent","setRewardPercent","setBreadcrumbs","useStore","state","navigate","useNavigate","breadcrumbs","useMemo","id","title","path","t","useTranslation","useEffect","data","insuranceTerms","isLoading","isLoadingInsuranceTerms","useGetAllQuery","key","KEYS","url","URLS","insuranceTermsList","getSelectOptionsListFromData","region","isLoadingRegion","regions","regionList","genders","genderList","okeds","okedList","ownershipForms","ownershipFormList","district","districts","params","enabled","districtList","activity","activityAndRisk","mutate","getPersonalInfoRequest","isLoadingPersonalInfo","usePostQuery","listKeyId","personalInfoProvider","getOrganizationInfoRequest","isLoadingOrganizationInfo","organizationInfoProvider","calculatePremiumRequest","osgorCalculate","hideSuccessToast","createRequest","osgorCreate","attributes","fot","insuranceTermId","onSuccess","_ref4","_jsx","OverlayLoader","_jsxs","_Fragment","children","Panel","Row","Col","xs","Search","Section","Form","formRequest","_ref5","activityRisk","funeralExpensesSum","rewardSum","rpmSum","policies","agentId","insurantType","isEqual","passportData","fullName","districtId","gender","address","residentType","phone","String","_ref6","response","concat","getValueFromField","value","name","getFieldData","footer","Flex","className","Button","onClick","danger","type","gutterWidth","Title","gray","justify","Field","required","style","width","property","hideLabel","mask","placeholder","upperCase","maskChar","onChange","val","e","getInfo","format","_ref2","getOrgInfo","_ref3","defaultValue","label","options","pattern","message","parseInt","dateFormat","find","_insuranceTerm","disabled","Styled","styled","div","_templateObject","_taggedTemplateLiteral","CreateContainer"],"sourceRoot":""}